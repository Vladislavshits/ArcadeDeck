from PyQt6.QtCore import QObject, pyqtSignal, Qt, QTimer
from PyQt6.QtWidgets import QWidget, QApplication, QPushButton
import logging
from enum import Enum, auto
import sdl2
import sdl2.ext

logger = logging.getLogger('ArcadeDeck.Navigation')

class NavigationLayer(Enum):
    """–°–ª–æ–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    MAIN = auto()
    SETTINGS = auto()
    SEARCH = auto()
    GAME_INFO = auto()

class NavigationController(QObject):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è ArcadeDeck
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –≤—Å–µ–º–∏ —ç–∫—Ä–∞–Ω–∞–º–∏
    """

    # –°–∏–≥–Ω–∞–ª—ã
    layer_changed = pyqtSignal(NavigationLayer)
    focus_changed = pyqtSignal(QWidget)
    search_activated = pyqtSignal()
    button_pressed = pyqtSignal(str)
    axis_moved = pyqtSignal(str, float)

    def __init__(self, main_window, hint_overrides=None):
        super().__init__()
        self.main_window = main_window
        self.current_layer = NavigationLayer.MAIN
        self.previous_layer = None
        self._active = True
        self._input_blocked = False  # üî• –ù–û–í–´–ô –§–õ–ê–ì: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–≤–æ–¥–∞

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö
        self.layer_widgets = {
            NavigationLayer.MAIN: [],
            NavigationLayer.SETTINGS: [],
            NavigationLayer.SEARCH: [],
            NavigationLayer.GAME_INFO: [],
        }

        self.focus_index = {
            NavigationLayer.MAIN: 0,
            NavigationLayer.SETTINGS: 0,
            NavigationLayer.SEARCH: 0,
            NavigationLayer.GAME_INFO: 0,
        }

        # –ú–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –≥–µ–π–º–ø–∞–¥–∞
        self.key_mapping = {
            'UP': sdl2.SDL_CONTROLLER_BUTTON_DPAD_UP,
            'DOWN': sdl2.SDL_CONTROLLER_BUTTON_DPAD_DOWN,
            'LEFT': sdl2.SDL_CONTROLLER_BUTTON_DPAD_LEFT,
            'RIGHT': sdl2.SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
            'A': sdl2.SDL_CONTROLLER_BUTTON_A,
            'B': sdl2.SDL_CONTROLLER_BUTTON_B,
            'Y': sdl2.SDL_CONTROLLER_BUTTON_Y,
            'X': sdl2.SDL_CONTROLLER_BUTTON_X,
            'SELECT': sdl2.SDL_CONTROLLER_BUTTON_BACK,
            'START': sdl2.SDL_CONTROLLER_BUTTON_START
        }

        self.button_state = {}
        self.sdl_initialized = False
        self.controller = None
        self.hint_widget = None
        self.hint_overrides = hint_overrides or {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._init_sdl2()
        self._start_event_polling()

        logger.info("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

    def _init_sdl2(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDL2 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–π–º–ø–∞–¥–æ–º"""
        if self.sdl_initialized:
            return

        logger.info("üïπÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDL2 –¥–ª—è –≥–µ–π–º–ø–∞–¥–∞...")

        # üî• –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –≥–µ–π–º–ø–∞–¥, –Ω–µ –≤—Å—é SDL
        if sdl2.SDL_Init(sdl2.SDL_INIT_GAMECONTROLLER) != 0:
            error_msg = sdl2.SDL_GetError().decode()
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SDL2: {error_msg}")
            return

        # –í–∫–ª—é—á–∞–µ–º –æ–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π (—ç—Ç–æ –≤–∞–∂–Ω–æ!)
        sdl2.SDL_StartTextInput()

        # –ü–æ–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        controller_count = sdl2.SDL_NumJoysticks()
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–∂–æ–π—Å—Ç–∏–∫–æ–≤: {controller_count}")

        for i in range(controller_count):
            if sdl2.SDL_IsGameController(i):
                self.controller = sdl2.SDL_GameControllerOpen(i)
                if self.controller:
                    name = sdl2.SDL_GameControllerName(self.controller).decode()
                    logger.info(f"üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä: {name} (–∏–Ω–¥–µ–∫—Å {i})")
                    self.sdl_initialized = True
                    break

        if not self.controller:
            logger.info("‚ÑπÔ∏è –ì–µ–π–º–ø–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è")

    def _start_event_polling(self):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ —Å–æ–±—ã—Ç–∏–π –≥–µ–π–º–ø–∞–¥–∞"""
        self.timer = QTimer()
        self.timer.timeout.connect(self._poll_controller_events)
        self.timer.start(16)  # ~60 FPS
        logger.debug("‚è∞ –¢–∞–π–º–µ—Ä –æ–ø—Ä–æ—Å–∞ –≥–µ–π–º–ø–∞–¥–∞ –∑–∞–ø—É—â–µ–Ω")

    # ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô ====================

    def set_active(self, active):
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞"""
        self._active = active
        logger.debug(f"–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä {'–∞–∫—Ç–∏–≤–µ–Ω' if active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}")

    def block_input(self, blocked):
        """üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤–µ—Å—å –≤–≤–æ–¥ (–¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä)"""
        self._input_blocked = blocked
        logger.info(f"üéÆ –í–≤–æ–¥ –≥–µ–π–º–ø–∞–¥–∞ {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if blocked else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}")

    def _is_input_allowed(self):
        """üî• –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –≤–≤–æ–¥ –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç"""
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä)
        if self._input_blocked:
            return False

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        if not self._active:
            return False

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if not self._is_app_active():
            return False

        return True

    def _is_app_active(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤ —Ñ–æ–∫—É—Å–µ"""
        if not self.main_window or not self.main_window.isVisible():
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–º
        if not self.main_window.isActiveWindow():
            return False

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Qt
        app = QApplication.instance()
        if app and app.activeWindow() != self.main_window:
            return False

        return True

    def _poll_controller_events(self):
        """–û–ø—Ä–æ—Å —Å–æ–±—ã—Ç–∏–π –≥–µ–π–º–ø–∞–¥–∞ —á–µ—Ä–µ–∑ SDL2"""
        # üî• –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if not self._is_input_allowed():
            return

        event = sdl2.SDL_Event()
        while sdl2.SDL_PollEvent(event):
            if event.type == sdl2.SDL_CONTROLLERBUTTONDOWN:
                self._handle_controller_button(event.cbutton.button, True)
            elif event.type == sdl2.SDL_CONTROLLERBUTTONUP:
                self._handle_controller_button(event.cbutton.button, False)
            elif event.type == sdl2.SDL_CONTROLLERAXISMOTION:
                self._handle_controller_axis(event.caxis.axis, event.caxis.value)

    def _handle_controller_button(self, button, pressed):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è/–æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≥–µ–π–º–ø–∞–¥–∞"""
        # üî• –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not self._is_input_allowed():
            return

        self.button_state[button] = pressed
        if pressed:
            logger.debug(f"üéÆ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {button}")
            self._process_button_press(button)

    def _handle_controller_axis(self, axis, value):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Å–µ–π –≥–µ–π–º–ø–∞–¥–∞"""
        # üî• –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not self._is_input_allowed():
            return

        try:
            normalized = value / 32767.0 if value >= 0 else value / 32768.0
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–∏: {e}")
            normalized = float(value)

        axis_name = None
        if axis == sdl2.SDL_CONTROLLER_AXIS_LEFTX:
            axis_name = 'LEFT_X'
        elif axis == sdl2.SDL_CONTROLLER_AXIS_LEFTY:
            axis_name = 'LEFT_Y'
        elif axis == sdl2.SDL_CONTROLLER_AXIS_RIGHTX:
            axis_name = 'RIGHT_X'
        elif axis == sdl2.SDL_CONTROLLER_AXIS_RIGHTY:
            axis_name = 'RIGHT_Y'

        if axis_name:
            self.axis_moved.emit(axis_name, normalized)

    def handle_key_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        # üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥
        if not self._is_input_allowed():
            return False

        key_map = {
            Qt.Key.Key_Up: 'UP',
            Qt.Key.Key_Down: 'DOWN',
            Qt.Key.Key_Left: 'LEFT',
            Qt.Key.Key_Right: 'RIGHT',
            Qt.Key.Key_Return: 'A',
            Qt.Key.Key_Escape: 'B',
            Qt.Key.Key_A: 'A',
            Qt.Key.Key_B: 'B',
            Qt.Key.Key_Y: 'Y',
            Qt.Key.Key_X: 'X'
        }

        button_name = key_map.get(event.key())
        if button_name:
            logger.debug(f"‚å®Ô∏è –ö–ª–∞–≤–∏—à–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤: {button_name}")
            return self._process_button_press(button_name)

        return False

    # ==================== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò ====================

    def _process_button_press(self, button):
        """
        –ì–õ–ê–í–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        """
        # üî• –§–ò–ù–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not self._is_input_allowed():
            return False

        logger.debug(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ {button} –≤ —Å–ª–æ–µ {self.current_layer.name}")

        # === 1. –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –†–ï–ñ–ò–ú–´ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ===
        if self._handle_special_modes(button):
            return True

        # === 2. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–ò–ì–ù–ê–õ–´ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞) ===
        self._emit_global_signals(button)

        # === 3. –û–ë–†–ê–ë–û–¢–ö–ê –ü–û –°–õ–û–Ø–ú (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞) ===
        if self._handle_layer_specific_actions(button):
            return True

        # === 4. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è) ===
        if self._handle_global_buttons(button):
            return True

        logger.debug(f"‚û°Ô∏è –ö–Ω–æ–ø–∫–∞ {button} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
        return False

    def _handle_special_modes(self, button):
        """1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ (–ø–æ–∏—Å–∫, –¥–∏–∞–ª–æ–≥–∏)"""
        # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ - –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ –∫—Ä–æ–º–µ BACK
        if self.current_layer == NavigationLayer.SEARCH:
            if button == self.key_mapping['B']:
                logger.info("üîç –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞")
                self.switch_layer(NavigationLayer.MAIN)
                return True
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ
            logger.debug("üö´ –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞")
            return True

        return False

    def _emit_global_signals(self, button):
        """2. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        for name, sdl_code in self.key_mapping.items():
            if button == sdl_code:
                try:
                    self.button_pressed.emit(name)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ {name}: {e}")
                break

    def _handle_layer_specific_actions(self, button):
        """3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è"""
        layer_handlers = {
            NavigationLayer.MAIN: self._handle_main_layer,
            NavigationLayer.SETTINGS: self._handle_settings_layer,
            NavigationLayer.GAME_INFO: self._handle_game_info_layer,
        }

        handler = layer_handlers.get(self.current_layer)
        if handler and handler(button):
            return True

        return False

    def _handle_global_buttons(self, button):
        """4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤–µ–∑–¥–µ)"""
        # === –ö–ù–û–ü–ö–ê B (–ù–ê–ó–ê–î) - –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
        if button == self.key_mapping['B']:
            return self._handle_back_action()

        # === –ö–ù–û–ü–ö–ê SELECT (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫) ===
        if button == self.key_mapping['SELECT']:
            logger.info("‚öôÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            self.main_window.toggle_settings()
            return True

        # === –ö–ù–û–ü–ö–ê Y (–ø–æ–∏—Å–∫) - —Ç–æ–ª—å–∫–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ===
        if button == self.key_mapping['Y'] and self.current_layer == NavigationLayer.MAIN:
            logger.info("üîç –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞")
            self.switch_layer(NavigationLayer.SEARCH)
            return True

        return False

    # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–õ–û–ï–í ====================

    def _handle_main_layer(self, button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if button == self.key_mapping['DOWN']:
            logger.info("‚¨áÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            self.switch_layer(NavigationLayer.SETTINGS)
            return True
        elif button == self.key_mapping['A']:
            logger.info("üéÆ –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã")
            self.activate_focused_widget()
            return True

        return False

    def _handle_settings_layer(self, button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_page = self.main_window.settings_page

        if button == self.key_mapping['UP']:
            return settings_page.navigate_up()
        elif button == self.key_mapping['DOWN']:
            return settings_page.navigate_down()
        elif button == self.key_mapping['RIGHT']:
            return settings_page.navigate_right()
        elif button == self.key_mapping['LEFT']:
            return settings_page.navigate_left()
        elif button == self.key_mapping['A']:
            return settings_page.activate_current()

        return False

    def _handle_game_info_layer(self, button):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ"""
        widgets = self.layer_widgets.get(NavigationLayer.GAME_INFO, [])
        if not widgets:
            return False

        current_idx = self.focus_index[NavigationLayer.GAME_INFO]

        if button == self.key_mapping['LEFT']:
            new_idx = (current_idx - 1) % len(widgets)
            self.set_focus(NavigationLayer.GAME_INFO, new_idx)
            return True
        elif button == self.key_mapping['RIGHT']:
            new_idx = (current_idx + 1) % len(widgets)
            self.set_focus(NavigationLayer.GAME_INFO, new_idx)
            return True
        elif button == self.key_mapping['A']:
            self.activate_focused_widget()
            return True

        return False

    # ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò BACK ====================

    def _handle_back_action(self):
        """
        –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ BACK
        –ò—Å–∫–ª—é—á–∞–µ—Ç –ª—é–±—ã–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è!
        """
        logger.info(f"üîô –û–±—Ä–∞–±–æ—Ç–∫–∞ BACK –≤ —Å–ª–æ–µ {self.current_layer.name}")

        back_handlers = {
            NavigationLayer.MAIN: self._back_from_main,
            NavigationLayer.SETTINGS: self._back_from_settings,
            NavigationLayer.GAME_INFO: self._back_from_game_info,
            NavigationLayer.SEARCH: self._back_from_search,
        }

        handler = back_handlers.get(self.current_layer)
        if handler:
            return handler()

        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–æ–π –¥–ª—è BACK: {self.current_layer}")
        return False

    def _back_from_main(self):
        """BACK –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é = –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üö™ –ó–∞–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        self.main_window.confirm_exit()
        return True

    def _back_from_settings(self):
        """BACK –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö = –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        logger.info("üè† –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        self.switch_layer(NavigationLayer.MAIN)
        return True

    def _back_from_game_info(self):
        """BACK –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ = –≤–æ–∑–≤—Ä–∞—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É"""
        logger.info("üìö –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É")
        self.switch_layer(NavigationLayer.MAIN)
        return True

    def _back_from_search(self):
        """BACK –≤ –ø–æ–∏—Å–∫–µ = –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        logger.info("üîç –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∏—Å–∫–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        self.switch_layer(NavigationLayer.MAIN)
        return True

    # ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–õ–û–Ø–ú–ò –ò –§–û–ö–£–°–û–ú ====================

    def switch_layer(self, new_layer):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        if new_layer == self.current_layer:
            return

        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–æ—è: {self.current_layer.name} ‚Üí {new_layer.name}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ–π
        self.previous_layer = self.current_layer

        # –û—á–∏—â–∞–µ–º —Ñ–æ–∫—É—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—è
        self.clear_focus(self.current_layer)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π
        self.current_layer = new_layer
        widgets = self.layer_widgets.get(new_layer, [])

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å (–∫—Ä–æ–º–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞)
        if widgets and new_layer != NavigationLayer.SEARCH:
            idx = min(self.focus_index[new_layer], len(widgets) - 1)
            self.set_focus(new_layer, idx)
        else:
            # –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å –µ—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫
            if QApplication.focusWidget():
                QApplication.focusWidget().clearFocus()

        # –°–∏–≥–Ω–∞–ª—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if new_layer == NavigationLayer.SEARCH:
            self.search_activated.emit()

        self.layer_changed.emit(new_layer)
        self.update_hints()

    def register_widgets(self, layer, widgets):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —Å–ª–æ–µ"""
        if not isinstance(layer, NavigationLayer):
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å–ª–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {layer}")

        self.layer_widgets[layer] = widgets
        logger.info(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(widgets)} –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è —Å–ª–æ—è {layer.name}")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π
        if widgets and self.current_layer == layer:
            self.set_focus(layer, 0)

    def set_focus(self, layer, index):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –≤–∏–¥–∂–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ª–æ–µ"""
        if layer != self.current_layer:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å–ª–æ–µ: {layer.name}")
            return

        widgets = self.layer_widgets.get(layer, [])
        if not widgets:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–∂–µ—Ç–æ–≤ –≤ —Å–ª–æ–µ {layer.name}")
            return

        if index < 0 or index >= len(widgets):
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ñ–æ–∫—É—Å–∞: {index} –¥–ª—è —Å–ª–æ—è {layer.name}")
            return

        # –°–Ω–∏–º–∞–µ–º —Ñ–æ–∫—É—Å —Å–æ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ —Å–ª–æ—è
        for widget in widgets:
            widget.setProperty("focused", False)
            widget.style().unpolish(widget)
            widget.style().polish(widget)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        widget = widgets[index]
        widget.setProperty("focused", True)
        widget.style().unpolish(widget)
        widget.style().polish(widget)
        widget.setFocus(Qt.FocusReason.TabFocusReason)

        self.focus_index[layer] = index
        self.focus_changed.emit(widget)

        logger.debug(f"üéØ –§–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∏–Ω–¥–µ–∫—Å {index} –≤ —Å–ª–æ–µ {layer.name}")

    def clear_focus(self, layer):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–ª–æ–µ"""
        widgets = self.layer_widgets.get(layer, [])
        for widget in widgets:
            widget.setProperty("focused", False)
            widget.style().unpolish(widget)
            widget.style().polish(widget)
            widget.clearFocus()

    def activate_focused_widget(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è currently —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        layer = self.current_layer
        idx = self.focus_index.get(layer, 0)
        widgets = self.layer_widgets.get(layer, [])

        if not widgets or idx < 0 or idx >= len(widgets):
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
            return

        widget = widgets[idx]
        logger.debug(f"üéÆ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞: {widget}")

        if isinstance(widget, QPushButton):
            QTimer.singleShot(0, widget.click)
            return

        if hasattr(widget, 'action') and callable(widget.action):
            widget.action()
            return

        widget.setFocus(Qt.FocusReason.TabFocusReason)

    # ==================== –ü–û–î–°–ö–ê–ó–ö–ò ====================

    def set_hint_widget(self, widget):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
        if widget is None:
            self.hint_widget = None
            return

        if not hasattr(widget, "setText"):
            raise ValueError("–í–∏–¥–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å setText()")

        self.hint_widget = widget
        self.update_hints()
        logger.info("üí° –í–∏–¥–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def update_hints(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—è"""
        if not self.hint_widget:
            return

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if self.current_layer in self.hint_overrides:
            text = self.hint_overrides[self.current_layer]
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è
            hints = {
                NavigationLayer.MAIN: "‚Üì: –ù–∞—Å—Ç—Ä–æ–π–∫–∏  |  A: –ó–∞–ø—É—Å—Ç–∏—Ç—å  |  Y: –ü–æ–∏—Å–∫  |  B: –í—ã—Ö–æ–¥",
                NavigationLayer.SETTINGS: "‚Üë: –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω  |  ‚Üê/‚Üí: –ù–∞–≤–∏–≥–∞—Ü–∏—è  |  A: –í—ã–±—Ä–∞—Ç—å  |  B: –ù–∞–∑–∞–¥",
                NavigationLayer.SEARCH: "B: –ù–∞–∑–∞–¥  |  Enter: –ü–æ–∏—Å–∫  |  –°—Ç—Ä–µ–ª–∫–∏: –ù–∞–≤–∏–≥–∞—Ü–∏—è",
                NavigationLayer.GAME_INFO: "‚Üê/‚Üí: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫  |  A: –í—ã–±—Ä–∞—Ç—å  |  B: –ù–∞–∑–∞–¥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É",
            }
            text = hints.get(self.current_layer, "")

        try:
            self.hint_widget.setText(text)
            logger.debug(f"üí° –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è {self.current_layer.name}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: {e}")

    # ==================== –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´ ====================

    def return_to_previous_layer(self):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ª–æ—é"""
        if self.previous_layer:
            logger.info(f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ª–æ—é: {self.previous_layer.name}")
            self.switch_layer(self.previous_layer)

    def move_focus(self, direction):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        if not (-1 <= direction <= 1):
            raise ValueError("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å -1 –∏–ª–∏ 1")

        layer = self.current_layer
        widgets = self.layer_widgets.get(layer, [])
        if not widgets:
            return

        current_idx = self.focus_index[layer]
        new_idx = (current_idx + direction) % len(widgets)
        self.set_focus(layer, new_idx)
