import os
import shutil
from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QLabel, QPushButton, QHBoxLayout,
    QMenu, QToolButton, QMessageBox, QFileDialog, QFrame
)
from PyQt6.QtGui import QPixmap, QFont
from PyQt6.QtCore import Qt
from pathlib import Path
import logging
import json

logger = logging.getLogger('ArcadeDeck')

class GameInfoPage(QWidget):
    """Page for displaying game information"""
    def __init__(self, game_data=None, parent=None):
        super().__init__(parent)
        self.game_data = game_data

        # Initialize callbacks
        self._back_callback = None
        self._action_callback = None
        self._delete_callback = None
        self._change_cover_callback = None

        self._init_ui()

        # Initialize with game data if provided
        if game_data:
            self.set_game(game_data, is_installed=False)

    def _init_ui(self):
        """Initialize UI components"""
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(40, 40, 40, 40)
        main_layout.setSpacing(40)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –æ–±–ª–æ–∂–∫–∞ –∏–≥—Ä—ã (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä)
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        left_layout.setAlignment(Qt.AlignmentFlag.AlignTop)

        # Game cover - —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–ª–∏—Ç–∫–∞ –∫–∞–∫ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
        self.cover_label = QLabel()
        self.cover_label.setFixedSize(300, 450)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        self.cover_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.cover_label.setStyleSheet("""
            border: 3px solid #444;
            border-radius: 15px;
            background-color: #2a2a2a;
        """)
        left_layout.addWidget(self.cover_label)
        left_layout.addStretch()

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∫–Ω–æ–ø–∫–∏
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        right_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        right_layout.setSpacing(25)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        text_container = QFrame()
        text_container_layout = QVBoxLayout(text_container)
        text_container_layout.setContentsMargins(0, 0, 0, 0)
        text_container_layout.setSpacing(15)
        text_container_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)

        # Game title - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        self.title_label = QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã")
        self.title_label.setFont(QFont("Arial", 28, QFont.Weight.Bold))
        self.title_label.setStyleSheet("color: #ffffff; margin: 0; padding: 0;")
        self.title_label.setAlignment(Qt.AlignmentFlag.AlignLeft)
        text_container_layout.addWidget(self.title_label)

        # Game description - –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        self.description_label = QLabel("–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã...")
        self.description_label.setWordWrap(True)
        self.description_label.setFont(QFont("Arial", 16))
        self.description_label.setStyleSheet("color: #cccccc; margin: 0; padding: 0;")
        self.description_label.setMinimumWidth(600)
        self.description_label.setMinimumHeight(150)
        self.description_label.setAlignment(Qt.AlignmentFlag.AlignLeft)
        text_container_layout.addWidget(self.description_label)

        right_layout.addWidget(text_container)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
        right_layout.addStretch()

        # Action buttons - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        self.action_button = QPushButton("–ò–≥—Ä–∞—Ç—å")
        self.action_button.setFixedHeight(60)
        self.action_button.setFont(QFont("Arial", 16, QFont.Weight.Bold))

        # –ö–Ω–æ–ø–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω—é
        self.menu_button = QToolButton()
        self.menu_button.setText("‚ãÆ")  # –¢—Ä–∏ —Ç–æ—á–∫–∏ –¥–ª—è –º–µ–Ω—é
        self.menu_button.setFixedSize(70, 60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        self.menu_button.setFont(QFont("Arial", 24, QFont.Weight.Bold))
        self.menu_button.setPopupMode(QToolButton.ToolButtonPopupMode.InstantPopup)
        self.menu_button.setStyleSheet("QToolButton::menu-indicator { image: none; }")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = QMenu(self.menu_button)

        # –î–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é
        self.delete_action = self.context_menu.addAction("–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É")
        self.change_cover_action = self.context_menu.addAction("–ò–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏
        self.menu_button.setMenu(self.context_menu)

        self.back_button = QPushButton("–ù–∞–∑–∞–¥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É")
        self.back_button.setFixedHeight(50)
        self.back_button.setFont(QFont("Arial", 14))

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ –º–µ–Ω—é
        action_layout = QHBoxLayout()
        action_layout.addWidget(self.action_button)
        action_layout.addWidget(self.menu_button)
        action_layout.setSpacing(10)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
        right_layout.addLayout(action_layout)
        right_layout.addWidget(self.back_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout.addWidget(left_widget, 45)  # 45% —à–∏—Ä–∏–Ω—ã –¥–ª—è –æ–±–ª–æ–∂–∫–∏
        main_layout.addWidget(right_widget, 55)  # 55% —à–∏—Ä–∏–Ω—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

        # Connect signals
        self.back_button.clicked.connect(self.on_back)
        self.action_button.clicked.connect(self.on_action)
        self.delete_action.triggered.connect(self.on_delete)
        self.change_cover_action.triggered.connect(self.on_change_cover)

    def update_installation_status(self, is_installed):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.is_installed = is_installed
        self.action_button.setText("–ò–≥—Ä–∞—Ç—å" if self.is_installed else "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.menu_button.setVisible(self.is_installed)

        # –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é
        self.delete_action.setEnabled(self.is_installed)
        self.change_cover_action.setEnabled(self.is_installed)

    def set_game(self, game_data, is_installed=False):
        """Set game data to display"""
        self.game_data = game_data or {}
        self.is_installed = bool(is_installed)

        # –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        self.title_label.setText(
            self.game_data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        )

        # –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã
        self.description_label.setText(
            self.game_data.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        )

        # –û–±–Ω–æ–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É –∏–≥—Ä—ã
        self.update_cover_image()

        # –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        self.action_button.setText("–ò–≥—Ä–∞—Ç—å" if self.is_installed else "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.menu_button.setVisible(self.is_installed)
        self.delete_action.setEnabled(self.is_installed)
        self.change_cover_action.setEnabled(self.is_installed)

    def update_cover_image(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏"""
        logger.info(f"üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –∏–≥—Ä—ã: {self.game_data.get('title')}")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–±–ª–æ–∂–∫—É –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ
        custom_cover_path = self.get_custom_cover_path()

        if custom_cover_path and os.path.exists(custom_cover_path):
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ–±–ª–æ–∂–∫–∞: {custom_cover_path}")
            try:
                pixmap = QPixmap(custom_cover_path)
                if pixmap.isNull():
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –æ–±–ª–æ–∂–∫—É: {custom_cover_path}")
                    raise Exception("Invalid image file")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±–ª–æ–∂–∫–∏: {e}")
                custom_cover_path = None

        if not custom_cover_path:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±–ª–æ–∂–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
            image_path = self.game_data.get("image_path")
            if image_path and os.path.exists(image_path):
                logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±–ª–æ–∂–∫–∞: {image_path}")
                try:
                    pixmap = QPixmap(image_path)
                    if pixmap.isNull():
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±–ª–æ–∂–∫—É: {image_path}")
                        raise Exception("Invalid image file")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±–ª–æ–∂–∫–∏: {e}")
                    self.cover_label.clear()
                    return
            else:
                # –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –æ–±–ª–æ–∂–∫–∏ –Ω–µ—Ç
                logger.warning(f"‚ö†Ô∏è –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∏–≥—Ä—ã: {self.game_data.get('title')}")
                self.cover_label.clear()
                return

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É
        self.cover_label.setPixmap(pixmap.scaled(
            self.cover_label.size(),
            Qt.AspectRatioMode.KeepAspectRatioByExpanding,
            Qt.TransformationMode.SmoothTransformation
        ))
        logger.info(f"‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    def get_custom_cover_path(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±–ª–æ–∂–∫–µ –∏–≥—Ä—ã"""
        if not self.game_data:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–æ–∂–∫–∏")
            return None

        game_id = self.game_data.get('id')
        platform = self.game_data.get('platform')

        if not all([game_id, platform]):
            logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–æ–∂–∫–∏: game_id={game_id}, platform={platform}")
            return None

        # –ü–æ–ª—É—á–∞–µ–º project_root –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç project_root
            project_root = self.window().project_root
        except AttributeError:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
            project_root = Path(".")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å: {project_root}/users/images/{platform}/{game_id}/
        images_dir = project_root / "users" / "images" / platform / game_id
        logger.info(f"üîç –ü–æ–∏—Å–∫ –æ–±–ª–æ–∂–∫–∏ –≤: {images_dir}")

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            images_dir.mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ–±–ª–æ–∂–µ–∫ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {images_dir}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±–ª–æ–∂–µ–∫: {e}")
            return None

        # –ò—â–µ–º —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        image_extensions = ['.png', '.jpg', '.jpeg', '.bmp', '.webp']
        for ext in image_extensions:
            cover_path = images_dir / f"cover{ext}"
            if cover_path.exists():
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞: {cover_path}")
                return str(cover_path)

        logger.info(f"üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤: {images_dir}")
        return None

    def on_change_cover(self):
        """Handle change cover action from menu"""
        if not self.game_data:
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã")
            return

        logger.info(f"üé® –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –∏–≥—Ä—ã: {self.game_data.get('title')}")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É",
            "",
            "Images (*.png *.jpg *.jpeg *.bmp *.webp)"
        )

        if not file_path:
            logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –æ–±–ª–æ–∂–∫–∏")
            return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        valid_extensions = ['.png', '.jpg', '.jpeg', '.bmp', '.webp']
        file_ext = Path(file_path).suffix.lower()
        if file_ext not in valid_extensions:
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_ext}")
            QMessageBox.warning(
                self,
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {', '.join(valid_extensions)}"
            )
            return

        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –æ–±–ª–æ–∂–∫–∏
            game_id = self.game_data.get('id')
            platform = self.game_data.get('platform')

            if not game_id or not platform:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∏–≥—Ä—ã –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É")
                QMessageBox.warning(
                    self,
                    "–û—à–∏–±–∫–∞",
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∏–≥—Ä—ã –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º project_root
            try:
                project_root = self.window().project_root
            except AttributeError:
                project_root = Path(".")

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ–±–ª–æ–∂–∫–∏: {project_root}/users/images/{platform}/{game_id}/
            cover_dir = project_root / "users" / "images" / platform / game_id
            cover_dir.mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ–±–ª–æ–∂–∫–∏: {cover_dir}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–æ–∂–∫—É —Å –∏–º–µ–Ω–µ–º cover.{—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ}
            cover_filename = f"cover{file_ext}"
            destination_path = cover_dir / cover_filename

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–ª–æ–∂–∫–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            for old_ext in valid_extensions:
                if old_ext != file_ext:
                    old_path = cover_dir / f"cover{old_ext}"
                    if old_path.exists():
                        old_path.unlink()
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –æ–±–ª–æ–∂–∫–∞: {old_path}")

            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(file_path, destination_path)
            logger.info(f"‚úÖ –û–±–ª–æ–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {destination_path}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.update_cover_image()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –æ–±–ª–æ–∂–∫–∞–º–∏ –≤ —Ä–µ–µ—Å—Ç—Ä–µ
            self._update_registry_with_cover_path(str(cover_dir))

            # –í—ã–∑—ã–≤–∞–µ–º callback —Å –Ω–æ–≤—ã–º –ø—É—Ç–µ–º –∫ –æ–±–ª–æ–∂–∫–µ
            if self.change_cover_callback:
                self.change_cover_callback(self.game_data, str(destination_path))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            QMessageBox.information(
                self,
                "–£—Å–ø–µ—Ö! üéâ",
                "–û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–§–∞–π–ª: {cover_filename}\n"
                f"–ü—É—Ç—å: {cover_dir}"
            )
            logger.info(f"‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É:\n{str(e)}"
            )

    def _update_registry_with_cover_path(self, cover_dir_path):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä —Å –ø—É—Ç–µ–º –∫ –ø–∞–ø–∫–µ –æ–±–ª–æ–∂–µ–∫"""
        try:
            game_id = self.game_data.get('id')
            if not game_id:
                return

            # –ü–æ–ª—É—á–∞–µ–º project_root
            try:
                project_root = self.window().project_root
            except AttributeError:
                project_root = Path(".")

            # –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä
            registry_path = project_root / "users" / "installed_games.json"

            if not registry_path.exists():
                return

            # –ß–∏—Ç–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
            with open(registry_path, 'r', encoding='utf-8') as f:
                registry = json.load(f)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–≥—Ä—ã
            for game in registry.get('installed_games', []):
                if game.get('id') == game_id:
                    game['cover_directory'] = cover_dir_path
                    break

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
            with open(registry_path, 'w', encoding='utf-8') as f:
                json.dump(registry, f, ensure_ascii=False, indent=4)

            logger.info(f"‚úÖ –†–µ–µ—Å—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø—É—Ç–µ–º –∫ –æ–±–ª–æ–∂–∫–∞–º: {cover_dir_path}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")

    def _delete_game_files(self, game_data):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä
            try:
                project_root = self.window().project_root
            except AttributeError:
                project_root = Path(".")

            registry_path = project_root / "users" / "installed_games.json"

            if not registry_path.exists():
                logger.warning("‚ö†Ô∏è –†–µ–µ—Å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ß–∏—Ç–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
            with open(registry_path, 'r', encoding='utf-8') as f:
                registry = json.load(f)

            # –ò—â–µ–º –∏–≥—Ä—É –≤ —Ä–µ–µ—Å—Ç—Ä–µ (–≤–∞—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            game_id = game_data.get('id')
            game_info = registry.get(game_id)

            if not game_info:
                logger.warning(f"‚ö†Ô∏è –ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
                return

            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            paths_to_delete = [
                game_info.get('install_path'),      # –§–∞–π–ª –∏–≥—Ä—ã
                game_info.get('launcher_path'),     # –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
            ]

            for path_str in paths_to_delete:
                if path_str and os.path.exists(path_str):
                    path_obj = Path(path_str)
                    if path_obj.is_file():
                        path_obj.unlink()
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path_str}")
                    elif path_obj.is_dir():
                        shutil.rmtree(path_obj)
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {path_str}")

            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –æ–±–ª–æ–∂–∫–∞–º–∏ –∏–≥—Ä—ã
            cover_dir = project_root / "users" / "images" / game_info.get('platform') / game_id
            if cover_dir.exists() and cover_dir.is_dir():
                shutil.rmtree(cover_dir)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å –æ–±–ª–æ–∂–∫–∞–º–∏: {cover_dir}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∏–∑ –ø–∞–ø–∫–∏ launchers
            launcher_path = project_root / "users" / "launchers" / f"{game_id}.sh"
            if launcher_path.exists():
                launcher_path.unlink()
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞: {launcher_path}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–≥—Ä—ã: {e}")
            raise

    def _remove_from_registry(self, game_data):
        """–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
        try:
            game_id = game_data.get('id')
            if not game_id:
                return

            # –ü–æ–ª—É—á–∞–µ–º project_root
            try:
                project_root = self.window().project_root
            except AttributeError:
                project_root = Path(".")

            # –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä
            registry_path = project_root / "users" / "installed_games.json"

            if not registry_path.exists():
                return

            # –ß–∏—Ç–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
            with open(registry_path, 'r', encoding='utf-8') as f:
                registry = json.load(f)

            # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ (–≤–∞—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            if game_id in registry:
                del registry[game_id]
                logger.info(f"‚úÖ –ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {game_id}")

                # –ï—Å–ª–∏ —Ä–µ–µ—Å—Ç—Ä –ø—É—Å—Ç–æ–π (—Ç–æ–ª—å–∫–æ installed_games –º–∞—Å—Å–∏–≤), —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                if len(registry) == 1 and "installed_games" in registry and not registry["installed_games"]:
                    os.remove(registry_path)
                    logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è –∏–≥—Ä–∞)")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
                    with open(registry_path, 'w', encoding='utf-8') as f:
                        json.dump(registry, f, ensure_ascii=False, indent=4)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            raise

    def load_game(self, game_data):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        if not game_data:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            game_id = game_data.get('id')
            if game_id:
                from app.modules.module_logic.game_data_manager import get_game_data_manager
                manager = get_game_data_manager()

                if manager:
                    actual_game_data = manager.get_game_by_id(game_id)
                    if actual_game_data:
                        game_data = actual_game_data

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
            is_installed_status = game_data.get('is_installed', False)
            self.set_game(game_data, is_installed_status)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
            is_installed_status = game_data.get('is_installed', False)
            self.set_game(game_data, is_installed_status)

    def on_back(self):
        """Handle back button click"""
        if self.back_callback:
            self.back_callback()

    def on_action(self):
        """Handle action button click"""
        if self.action_callback:
            self.action_callback(self.game_data, self.is_installed)

    def on_delete(self):
        """Handle delete action from menu"""
        if not self.game_data:
            return

        game_title = self.game_data.get("title", "—ç—Ç—É –∏–≥—Ä—É")
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{game_title}'?\n\n"
            "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
            "‚Ä¢ –§–∞–π–ª –∏–≥—Ä—ã\n"
            "‚Ä¢ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞\n"
            "‚Ä¢ –ü–∞–ø–∫–∞ —Å –æ–±–ª–æ–∂–∫–∞–º–∏\n"
            "‚Ä¢ –ó–∞–ø–∏—Å—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ",
            QMessageBox.StandardButton.No | QMessageBox.StandardButton.Yes,
            QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            try:
                # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–≥—Ä—ã
                self._delete_game_files(self.game_data)

                # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                self._remove_from_registry(self.game_data)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                self.is_installed = False
                self.update_installation_status(False)

                # –û—á–∏—â–∞–µ–º –æ–±–ª–æ–∂–∫—É
                self.cover_label.clear()

                # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                if self.delete_callback:
                    self.delete_callback(self.game_data)

                QMessageBox.information(
                    self,
                    "–£—Å–ø–µ—Ö",
                    f"–ò–≥—Ä–∞ '{game_title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
                )

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
                QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É:\n{str(e)}"
                )

    # Properties for callbacks
    @property
    def back_callback(self):
        return self._back_callback

    @back_callback.setter
    def back_callback(self, callback):
        self._back_callback = callback

    @property
    def action_callback(self):
        return self._action_callback

    @action_callback.setter
    def action_callback(self, callback):
        self._action_callback = callback

    @property
    def delete_callback(self):
        return self._delete_callback

    @delete_callback.setter
    def delete_callback(self, callback):
        self._delete_callback = callback

    @property
    def change_cover_callback(self):
        return self._change_cover_callback

    @change_cover_callback.setter
    def change_cover_callback(self, callback):
        self._change_cover_callback = callback
