#!/usr/bin/env python3
import logging
import subprocess
import re
from pathlib import Path
from PyQt6.QtCore import QObject, pyqtSignal, QThread
import libtorrent as lt
import time

logger = logging.getLogger('GameDownloader')


class GameDownloader(QThread):
    progress_updated = pyqtSignal(int, str)
    finished = pyqtSignal()
    error_occurred = pyqtSignal(str)

    def __init__(self, game_data: dict, download_dir: Path, parent=None):
        super().__init__(parent)
        self.game_data = game_data
        self.download_dir = download_dir
        self._process = None
        self._cancelled = False
        self.session = None
        self.handle = None

    def _load_trackers_from_file(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ installer."""
        trackers = []
        try:
            current_dir = Path(__file__).parent
            trackers_file = current_dir / "trackers.txt"

            if trackers_file.exists():
                with open(trackers_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            trackers.append(line)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(trackers)} —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∏–∑ {trackers_file}")
            else:
                default_trackers = [
                    "udp://tracker.opentrackr.org:1337/announce",
                    "udp://open.demonii.com:1337/announce",
                    "udp://open.stealth.si:80/announce",
                    "udp://exodus.desync.com:6969/announce"
                ]
                with open(trackers_file, 'w', encoding='utf-8') as f:
                    f.write("# Default trackers list\n")
                    for tracker in default_trackers:
                        f.write(f"{tracker}\n")
                trackers = default_trackers
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {trackers_file} —Å —Ç—Ä–µ–∫–µ—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {e}")

        return trackers

    def _setup_libtorrent_session(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é libtorrent –¥–ª—è –≥–∏–≥–∞–±–∏—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Libtorrent —Å–µ—Å—Å–∏–∏ –¥–ª—è –≥–∏–≥–∞–±–∏—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...")

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–∏–≥–∞–±–∏—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
            settings = {
                'listen_interfaces': '0.0.0.0:6881-6999',  # –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤
                'download_rate_limit': 0,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                'upload_rate_limit': 0,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–¥–∞—á–∏ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                'active_downloads': 10,  # –ë–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
                'active_seeds': 5,  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏
                'active_limit': 200,  # –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤
                'connections_limit': 1000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                'connection_speed': 500,  # –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
                'enable_dht': True,
                'enable_lsd': True,
                'enable_upnp': True,
                'enable_natpmp': True,
                'max_peerlist_size': 5000,  # –ë–æ–ª—å—à–æ–π —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
                'max_paused_peerlist_size': 5000,
                'max_metadata_size': 10000000,  # 10MB –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                'max_rejects': 100,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
                'recv_socket_buffer_size': 1048576,  # 1MB –±—É—Ñ–µ—Ä –ø—Ä–∏–µ–º–∞
                'send_socket_buffer_size': 1048576,  # 1MB –±—É—Ñ–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏
                'file_pool_size': 500,  # –ë–æ–ª—å—à–æ–π –ø—É–ª —Ñ–∞–π–ª–æ–≤
                'urlseed_wait_retry': 5,  # –ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—Ç—Ä–∞–∏
                'outgoing_port': 6881,  # –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç
                'num_outgoing_ports': 199,  # –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤
                'send_buffer_low_watermark': 524288,  # 512KB
                'send_buffer_watermark': 2097152,  # 2MB
                'cache_size': 2048,  # 2GB –∫—ç—à–∞
                'cache_buffer_chunk_size': 16384,  # 16KB chunks
                'use_read_cache': True,
                'request_timeout': 10,
                'piece_timeout': 20,
                'inactivity_timeout': 20,
                'auto_manage_interval': 30,
            }

            self.session = lt.session(settings)

            # –î–æ–±–∞–≤–ª—è–µ–º DHT –Ω–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤
            dht_nodes = [
                ("dht.libtorrent.org", 25401),
                ("router.bittorrent.com", 6881),
                ("router.utorrent.com", 6881),
                ("dht.transmissionbt.com", 6881),
                ("dht.aelitis.com", 6881)
            ]

            for node in dht_nodes:
                self.session.add_dht_node(node)

            logger.info("‚úÖ –°–µ—Å—Å–∏—è Libtorrent –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≥–∏–≥–∞–±–∏—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Libtorrent —Å–µ—Å—Å–∏–∏: {e}")
            return False

    def _add_torrent_to_session(self, source: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—Ä—Ä–µ–Ω—Ç –∏–ª–∏ magnet –≤ —Å–µ—Å—Å–∏—é —Å —Ç—Ä–µ–∫–µ—Ä–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            logger.info(f"üì• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏—é: {source[:100]}...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
            additional_trackers = self._load_trackers_from_file()

            if source.startswith("magnet:"):
                logger.info("üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ magnet-—Å—Å—ã–ª–∫–∞")

                # –ü–∞—Ä—Å–∏–º magnet —Å—Å—ã–ª–∫—É
                params = lt.parse_magnet_uri(source)
                params.save_path = str(self.download_dir)
                params.storage_mode = lt.storage_mode_t.storage_mode_sparse

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
                for tracker in additional_trackers:
                    if tracker not in params.trackers:
                        params.trackers.append(tracker)
                        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫–µ—Ä: {tracker}")

                self.handle = self.session.add_torrent(params)
                logger.info("‚úÖ Magnet-—Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é")

            else:
                logger.info("üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω torrent-—Ñ–∞–π–ª")
                # –î–ª—è torrent —Ñ–∞–π–ª–æ–≤
                info = lt.torrent_info(source)
                params = lt.add_torrent_params()
                params.ti = info
                params.save_path = str(self.download_dir)
                params.storage_mode = lt.storage_mode_t.storage_mode_sparse

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã
                for tracker in additional_trackers:
                    params.trackers.append(tracker)
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫–µ—Ä: {tracker}")

                self.handle = self.session.add_torrent(params)
                logger.info("‚úÖ Torrent —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é")

            if self.handle:
                logger.info(f"‚úÖ –¢–æ—Ä—Ä–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å handle –¥–ª—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ –≤ —Å–µ—Å—Å–∏—é: {e}")
            import traceback
            logger.error(f"üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return False

    def run(self):
        logger.info("=" * 60)
        logger.info("üéÆ –ó–ê–ü–£–°–ö GAME DOWNLOADER –° OPTIMIZED LIBTORRENT")
        logger.info("=" * 60)
        logger.info(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {self.download_dir}")
        logger.info(f"üéØ –ò–≥—Ä–∞: {self.game_data.get('title', 'Unknown')}")

        if self._cancelled:
            self.progress_updated.emit(0, "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞.")
            return

        source = self.game_data.get("torrent_url")
        if not source:
            error_msg = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (torrent_url)."
            logger.error(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return

        # 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é libtorrent
        if not self._setup_libtorrent_session():
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Libtorrent —Å–µ—Å—Å–∏—é"
            logger.error(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return

        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ä—Ä–µ–Ω—Ç –≤ —Å–µ—Å—Å–∏—é
        if not self._add_torrent_to_session(source):
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç –≤ —Å–µ—Å—Å–∏—é"
            logger.error(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)
            return

        # 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
        logger.info("üìä –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")

        try:
            start_time = time.time()
            last_update_time = time.time()
            speed_samples = []
            last_progress = 0
            last_log_time = time.time()
            max_speed = 0

            while not self._cancelled and self.handle and self.handle.status().state != lt.torrent_status.seeding:
                status = self.handle.status()
                current_time = time.time()

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if status.total_wanted > 0:
                    progress = int((status.total_done / status.total_wanted) * 100)
                else:
                    progress = 0

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 0.2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                if current_time - last_update_time > 0.2:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                    instant_speed = status.download_rate / 1024  # KB/s

                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                    if instant_speed > max_speed:
                        max_speed = instant_speed

                    # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ)
                    speed_samples.append(instant_speed)
                    if len(speed_samples) > 8:  # –ë–æ–ª—å—à–µ samples –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        speed_samples.pop(0)
                    avg_speed = sum(speed_samples) / len(speed_samples) if speed_samples else 0

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ETA
                    if avg_speed > 10 and status.total_wanted > status.total_done:  # –ú–∏–Ω–∏–º—É–º 10 KB/s
                        remaining_bytes = status.total_wanted - status.total_done
                        eta_seconds = remaining_bytes / (avg_speed * 1024)
                        hours = int(eta_seconds // 3600)
                        minutes = int((eta_seconds % 3600) // 60)
                        seconds = int(eta_seconds % 60)
                    else:
                        eta_seconds = 0
                        hours = minutes = seconds = 0

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    downloaded_mb = status.total_done / (1024 * 1024)
                    total_mb = status.total_wanted / (1024 * 1024) if status.total_wanted > 0 else 0

                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
                    status_text = self._format_status_text(
                        progress=progress,
                        downloaded_mb=downloaded_mb,
                        total_mb=total_mb,
                        speed_kbs=avg_speed,
                        upload_kbs=status.upload_rate / 1024,
                        peers=status.num_peers,
                        seeds=status.num_seeds,
                        eta_seconds=eta_seconds,
                        state=status.state,
                        max_speed=max_speed
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ UI
                    self.progress_updated.emit(progress, status_text)

                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 1.5 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    if current_time - last_log_time > 1.5 or progress != last_progress:
                        detail_log = (
                            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}% | "
                            f"–°–∫–∞—á–∞–Ω–æ: {downloaded_mb:.1f}/{total_mb:.1f} MB | "
                            f"–°–∫–æ—Ä–æ—Å—Ç—å: {avg_speed:.1f} KB/s | "
                            f"–ú–∞–∫—Å: {max_speed:.1f} KB/s | "
                            f"–ü–∏—Ä–æ–≤: {status.num_peers} | "
                            f"–°–∏–¥–æ–≤: {status.num_seeds}"
                        )

                        if eta_seconds > 0:
                            detail_log += f" | ETA: {hours:02d}:{minutes:02d}:{seconds:02d}"

                        logger.info(detail_log)
                        last_log_time = current_time

                    last_update_time = current_time
                    last_progress = progress

                time.sleep(0.05)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            if not self._cancelled and self.handle and self.handle.status().state == lt.torrent_status.seeding:
                total_time = time.time() - start_time
                avg_speed_mb = (status.total_wanted / (1024 * 1024)) / total_time if total_time > 0 else 0

                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥!")
                logger.info(f"üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_speed_mb:.2f} MB/s")
                logger.info(f"üèÜ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {max_speed/1024:.2f} MB/s")

                self.progress_updated.emit(100, f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å: {max_speed/1024:.1f} MB/s")
                self.finished.emit()

        except Exception as e:
            if not self._cancelled:
                error_msg = f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}"
                logger.error(f"‚ùå {error_msg}")
                self.error_occurred.emit(error_msg)

    def _format_status_text(self, progress, downloaded_mb, total_mb, speed_kbs,
                        upload_kbs, peers, seeds, eta_seconds, state, max_speed):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""

        state_names = {
            lt.torrent_status.downloading: "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ",
            lt.torrent_status.seeding: "–†–∞–∑–¥–∞—á–∞",
            lt.torrent_status.checking_files: "–ü—Ä–æ–≤–µ—Ä–∫–∞",
            lt.torrent_status.downloading_metadata: "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö",
            lt.torrent_status.finished: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
        }

        state_text = state_names.get(state, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MB/s –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        speed_mbs = speed_kbs / 1024
        max_speed_mbs = max_speed / 1024

        status_text = f"{state_text}... {downloaded_mb:.1f} –ú–ë –∏–∑ {total_mb:.1f} –ú–ë"
        status_text += f" ‚Äî ‚ö° {speed_mbs:.1f} MB/s"
        status_text += f" ‚Äî üèÜ {max_speed_mbs:.1f} MB/s"

        if upload_kbs > 10:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è
            status_text += f" ‚Äî üì§ {upload_kbs/1024:.1f} MB/s"

        status_text += f" ‚Äî üë• {peers} –ø–∏—Ä–æ–≤ ({seeds} —Å–∏–¥–æ–≤)"

        if eta_seconds > 0 and speed_mbs > 0.1:  # –ú–∏–Ω–∏–º—É–º 0.1 MB/s
            hours = int(eta_seconds // 3600)
            minutes = int((eta_seconds % 3600) // 60)
            seconds = int(eta_seconds % 60)

            if hours > 0:
                status_text += f" ‚Äî ‚è∞ {hours:02d}:{minutes:02d}:{seconds:02d}"
            else:
                status_text += f" ‚Äî ‚è∞ {minutes:02d}:{seconds:02d}"
        else:
            status_text += " ‚Äî üîç –ü–æ–∏—Å–∫ –ø–∏—Ä–æ–≤..."

        return status_text

    def get_downloaded_file_path(self) -> Path:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"""
        try:
            if self.handle and self.handle.status().has_metadata:
                info = self.handle.get_torrent_info()
                if info.num_files() == 1:
                    file_name = info.name()
                    file_path = self.download_dir / file_name
                    if file_path.exists():
                        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_name}")
                        return file_path
                else:
                    folder_name = info.name()
                    folder_path = self.download_dir / folder_name
                    if folder_path.exists():
                        logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–∞ —Å–∫–∞—á–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {folder_name}")
                        return folder_path

            # Fallback: –∏—â–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            for file_path in self.download_dir.iterdir():
                if file_path.is_file() and file_path.stat().st_size > 0:
                    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (fallback): {file_path.name}")
                    return file_path

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

        logger.warning("‚ö†Ô∏è –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    def cancel(self):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        logger.info("‚èπÔ∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏...")
        self._cancelled = True

        if self.session and self.handle:
            try:
                self.session.remove_torrent(self.handle)
                logger.info("üóëÔ∏è –¢–æ—Ä—Ä–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

        self.quit()

logger.info("üîß –ú–æ–¥—É–ª—å GameDownloader –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≥–∏–≥–∞–±–∏—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞")
