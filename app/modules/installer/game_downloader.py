#!/usr/bin/env python3
import logging
import subprocess
import re
from pathlib import Path
from PyQt6.QtCore import QObject, pyqtSignal, QThread

logger = logging.getLogger('GameDownloader')


def convert_units(size_str: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ aria2c (MiB, GiB) –≤ –ø—Ä–∏–≤—ã—á–Ω—ã–µ –ú–ë, –ì–ë.
    """
    if size_str.endswith("MiB"):
        return f"{float(size_str[:-3]):.1f} –ú–ë"
    elif size_str.endswith("GiB"):
        return f"{float(size_str[:-3]):.1f} –ì–ë"
    elif size_str.endswith("KiB"):
        return f"{float(size_str[:-3]):.1f} –ö–ë"
    return size_str


class GameDownloader(QThread):
    progress_updated = pyqtSignal(int, str)
    finished = pyqtSignal()
    error_occurred = pyqtSignal(str)

    def __init__(self, game_data: dict, download_dir: Path, parent=None):
        super().__init__(parent)
        self.game_data = game_data
        self.download_dir = download_dir
        self._process = None
        self._cancelled = False

    def _load_trackers_from_file(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ installer."""
        trackers = []
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ trackers.txt –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            current_dir = Path(__file__).parent
            trackers_file = current_dir / "trackers.txt"
            
            if trackers_file.exists():
                with open(trackers_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                            trackers.append(line)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(trackers)} —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∏–∑ {trackers_file}")
            else:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å default-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                default_trackers = [
                    "udp://tracker.opentrackr.org:1337/announce",
                    "udp://open.demonii.com:1337/announce", 
                    "udp://open.stealth.si:80/announce",
                    "udp://exodus.desync.com:6969/announce"
                ]
                with open(trackers_file, 'w', encoding='utf-8') as f:
                    f.write("# Default trackers list\n")
                    for tracker in default_trackers:
                        f.write(f"{tracker}\n")
                trackers = default_trackers
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {trackers_file} —Å —Ç—Ä–µ–∫–µ—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        
        return trackers

    def _extract_trackers_from_magnet(self, magnet_url: str) -> list:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç—Ä–µ–∫–µ—Ä—ã –∏–∑ magnet-—Å—Å—ã–ª–∫–∏."""
        trackers = []
        try:
            from urllib.parse import parse_qs, urlparse
            parsed = urlparse(magnet_url)
            query_params = parse_qs(parsed.query)
            if 'tr' in query_params:
                for tracker in query_params['tr']:
                    if tracker:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–∫–µ—Ä –Ω–µ –ø—É—Å—Ç–æ–π
                        trackers.append(tracker)
                logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(trackers)} —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∏–∑ magnet-—Å—Å—ã–ª–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤ –∏–∑ magnet-—Å—Å—ã–ª–∫–∏: {e}")
        
        return trackers

    def run(self):
        if self._cancelled:
            self.progress_updated.emit(0, "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞.")
            return

        source = self.game_data.get("torrent_url")
        if not source:
            self.error_occurred.emit("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (torrent_url).")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ aria2c –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ArcadeDeck/app/venv/
        project_root = Path(__file__).parent.parent.parent.parent  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –¥–æ ArcadeDeck/
        venv_bin_dir = project_root / 'app' / 'venv' / 'bin'
        aria2c_path = venv_bin_dir / 'aria2c'
        
        # –ï—Å–ª–∏ –≤ venv –Ω–µ—Ç aria2c, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π (–∫–∞–∫ fallback)
        if not aria2c_path.exists():
            aria2c_path = "aria2c"  # –°–∏—Å—Ç–µ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è
            logger.warning("‚ö†Ô∏è aria2c –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ venv, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        else:
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è aria2c –∏–∑ venv: {aria2c_path}")

        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫–µ—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
        file_trackers = self._load_trackers_from_file()
        
        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–∫–µ—Ä—ã –∏–∑ magnet-—Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ —ç—Ç–æ magnet)
        magnet_trackers = []
        if source.startswith("magnet:"):
            magnet_trackers = self._extract_trackers_from_magnet(source)
        
        # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–µ—Ä—ã, —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_trackers = list(set(file_trackers + magnet_trackers))
        logger.info(f"üìä –í—Å–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {len(all_trackers)}")
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É aria2c
        cmd = [
            str(aria2c_path),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ aria2c –∏–∑ venv
            f"--dir={self.download_dir}",
            "--enable-dht=true",
            "--enable-dht6=true",
            "--dht-listen-port=6881-6999",
            "--enable-peer-exchange=true",
            "--bt-enable-lpd=true",
            "--allow-overwrite=true",
            "--check-integrity=true",
            "--seed-time=0",
            "--summary-interval=1",
            "--bt-request-peer-speed-limit=50K",
            "--max-overall-upload-limit=1K",
            "--max-connection-per-server=16",
            "--split=16",
            "--min-split-size=1M",
            "--bt-max-peers=500",
            "--bt-tracker-connect-timeout=10",
            "--bt-tracker-timeout=10",
            "--bt-stop-timeout=3600",
            "--listen-port=6881-6999",
            "--user-agent=Transmission/2.94",
            "--peer-id-prefix=-TR2940-"
        ]

        # 5. –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–µ—Ä—ã –≤ –∫–æ–º–∞–Ω–¥—É
        for tracker in all_trackers:
            cmd.append(f"--bt-tracker={tracker}")

        cmd.append(source)

        # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –º–µ—Ç–æ–¥–∞ run() –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        try:
            logger.info(f"üì• –ó–∞–ø—É—Å–∫–∞—é –∑–∞–≥—Ä—É–∑–∫—É: {' '.join(cmd[:5])}...")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∫–æ–º–∞–Ω–¥—ã
            
            self._process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )

            # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_re = re.compile(
                r"\[#.+?\s+([\d\.]+[KMG]iB)/([\d\.]+[KMG]iB)\((\d+)%\).*DL:([\d\.]+[KMG]iB).*ETA:([^\]]+)\]"
            )

            for line in iter(self._process.stdout.readline, ''):
                if self._cancelled:
                    break
                    
                line = line.strip()
                if not line:
                    continue

                match = progress_re.search(line)
                if match:
                    downloaded = convert_units(match.group(1))
                    total = convert_units(match.group(2))
                    percent = int(match.group(3))
                    speed = convert_units(match.group(4))
                    eta = match.group(5) or "–§–∞–π–ª –ø–æ—á—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω!"

                    status = f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ... {downloaded} –∏–∑ {total} ‚Äî {speed} ‚Äî ETA: {eta}"
                    self.progress_updated.emit(percent, status)
                    logger.info(status)

            if self._cancelled:
                self._process.terminate()
                try:
                    self._process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    self._process.kill()
                self.progress_updated.emit(0, "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                logger.info("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return

            self._process.wait()
                
            if self._process.returncode == 0:
                logger.info("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
                self.progress_updated.emit(100, "‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                self.finished.emit()
            else:
                error_msg = f"aria2c –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {self._process.returncode}"
                logger.error(f"‚ùå {error_msg}")
                self.error_occurred.emit(error_msg)

        except Exception as e:
            if not self._cancelled:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ aria2c: {e}"
                logger.error(f"‚ùå {error_msg}")
                self.error_occurred.emit(error_msg)

    def get_downloaded_file_path(self) -> Path:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"""
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            for file_path in self.download_dir.iterdir():
                if file_path.is_file():
                    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path.name}")
                    return file_path
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None

    def cancel(self):
        self._process = None
        self._cancelled = True
        if self._process and self._process.poll() is None:
            self._process.terminate()
            try:
                self._process.wait(timeout=2)
            except subprocess.TimeoutExpired:
                self._process.kill()
