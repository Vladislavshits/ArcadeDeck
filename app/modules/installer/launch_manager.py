#!/usr/bin/env python3
import json
import logging
import shutil
import time
from pathlib import Path
from typing import Optional, Dict, Any, List

logger = logging.getLogger('LaunchManager')


class LaunchManager:
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.launch_profiles = self._load_launch_profiles()
        self.scripts_dir = self.project_root / 'users' / 'launchers'
        self.scripts_dir.mkdir(parents=True, exist_ok=True)
        self.installed_games_file = project_root / 'users' / 'installed_games.json'
        self.installed_games = self._load_installed_games()

    def get_installed_games(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
        if self.installed_games_file.exists():
            try:
                with open(self.installed_games_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}

    def _load_launch_profiles(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        profiles_path = self.project_root / 'app' / 'registry' / 'registry_launch_profiles.json'
        try:
            with open(profiles_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return {}

    def _load_installed_games(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–∞—Ö"""
        try:
            if self.installed_games_file.exists():
                with open(self.installed_games_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ installed_games: {e}")
            return {}

    def _save_installed_games(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–∞—Ö"""
        try:
            self.installed_games_file.parent.mkdir(parents=True, exist_ok=True)
            with open(self.installed_games_file, 'w', encoding='utf-8') as f:
                json.dump(self.installed_games, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è installed_games: {e}")

    def _find_launch_profile_by_name(self, emulator_name: str) -> Optional[Dict[str, Any]]:
        """–ò—â–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        for profile_key, profile_data in self.launch_profiles.items():
            if profile_data.get('name') == emulator_name:
                return profile_data
        return None

    def register_installed_game(self, game_data: dict, install_path: Path):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–≥—Ä—É"""
        game_id = game_data.get('id')
        if game_id:
            self.installed_games[game_id] = {
                'title': game_data.get('title'),
                'platform': game_data.get('platform'),
                'install_path': str(install_path),
                'install_date': time.time(),
                'emulator': game_data.get('preferred_emulator')
            }
            self._save_installed_games()

    def unregister_installed_game(self, game_id: str):
        """–£–¥–∞–ª—è–µ—Ç –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö"""
        if game_id in self.installed_games:
            del self.installed_games[game_id]
            self._save_installed_games()

    def create_launcher(self, game_data: dict, game_install_path: Path) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã.
        game_data: –¥–∞–Ω–Ω—ã–µ –∏–∑ registry_games.json
        game_install_path: –ø—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–≥—Ä–µ (—Ñ–∞–π–ª—É .iso, .pbp –∏ —Ç.–¥.)
        """
        try:
            emulator_name = game_data.get('preferred_emulator')
            platform = game_data.get('platform')
            game_id = game_data.get('id')

            if not all([emulator_name, platform, game_id]):
                logger.error("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç preferred_emulator, platform –∏–ª–∏ id")
                return False

            # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∏–º–µ–Ω–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞
            profile = self._find_launch_profile_by_name(emulator_name)
            if not profile:
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_name}'")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            command_template = profile.get('command_template')
            if not command_template:
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω command_template –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_name}'")
                return False

            # –ü–æ–ª—É—á–∞–µ–º flatpak_id –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            flatpak_id = profile.get('flatpak_id', '')

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
            template_vars = {
                'config_dir': f'"{str(self.project_root / "users" / "configs" / platform)}"',
                'game_path': f'"{str(game_install_path)}"',  # –ü—É—Ç—å –≤ –∫–∞–≤—ã—á–∫–∞—Ö!
                'game_id': game_id,
                'project_root': f'"{str(self.project_root)}"',
                'emulator_name': emulator_name,
                'flatpak_id': flatpak_id
            }

            # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            launch_command = command_template.format(**template_vars)

            # –î–æ–±–∞–≤–ª—è–µ–º environment variables –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            env_variables = profile.get('env_variables', {})
            if env_variables:
                env_lines = []
                for key, value in env_variables.items():
                    env_lines.append(f"export {key}=\"{value}\"")
                env_section = "\n".join(env_lines) + "\n"
            else:
                env_section = ""

            # –î–æ–±–∞–≤–ª—è–µ–º post-launch actions –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            post_actions = profile.get('post_launch_actions', [])
            if post_actions:
                post_actions_section = "\n" + "\n".join(post_actions) + "\n"
            else:
                post_actions_section = ""

            # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bash-—Å–∫—Ä–∏–ø—Ç–∞
            script_content = f"""#!/bin/bash
    # Launcher for {game_data.get('title')}
    # Generated by ArcadeDeck

    cd "{self.project_root}"
    {env_section}
    {launch_command}
    {post_actions_section}
    """

            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫—Ä–∏–ø—Ç–∞-–ª–∞—É–Ω—á–µ—Ä–∞
            launcher_path = self.scripts_dir / f"{game_id}.sh"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            with open(launcher_path, 'w', encoding='utf-8') as f:
                f.write(script_content)

            # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            launcher_path.chmod(0o755)

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –∏–≥—Ä—ã {game_id}: {launcher_path}")
            logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: {launch_command}")
            
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
            self.register_installed_game(game_data, game_install_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ª–∞—É–Ω—á–µ—Ä—É –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
            if game_id in self.installed_games:
                self.installed_games[game_id]['launcher_path'] = str(launcher_path)
                self._save_installed_games()
            
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞: {e}")
            return False

    def get_install_info(self, game_id: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–≥—Ä—ã"""
        return self.installed_games.get(game_id)

    def is_game_installed(self, game_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞"""
        installed_games = self.get_installed_games()
        return game_id in installed_games

    def get_all_installed_games(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
        return list(self.installed_games.values())

    def launch_game(self, game_id: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç-–ª–∞—É–Ω—á–µ—Ä"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–≥—Ä–µ
        game_info = self.installed_games.get(game_id)
        if not game_info:
            logger.error(f"‚ùå –ò–≥—Ä–∞ {game_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ launcher_path
        launcher_path = Path(game_info.get('launcher_path', ''))
        
        if not launcher_path.exists():
            logger.error(f"‚ùå –õ–∞—É–Ω—á–µ—Ä –¥–ª—è –∏–≥—Ä—ã {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {launcher_path}")
            return False

        try:
            import subprocess
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è UI
            subprocess.Popen(['bash', str(launcher_path)], start_new_session=True)
            logger.info(f"üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É {game_id}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")
            return False

    def uninstall_game(self, game_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∏–≥—Ä—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            installed_games = self.get_installed_games()
            if game_id in installed_games:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ª–∞—É–Ω—á–µ—Ä–∞
                launcher_path = Path(installed_games[game_id].get('launcher_path', ''))
                if launcher_path.exists():
                    launcher_path.unlink()
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                del installed_games[game_id]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
                with open(self.installed_games_file, 'w', encoding='utf-8') as f:
                    json.dump(installed_games, f, ensure_ascii=False, indent=2)
                
                return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
        return False
