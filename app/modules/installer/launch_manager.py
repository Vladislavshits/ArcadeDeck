import os
import json
import logging
import shutil
import time
import subprocess
from pathlib import Path
from typing import Optional, Dict, Any, List

# –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
from core import get_users_path
from core import get_users_subpath

logger = logging.getLogger('LaunchManager')


class LaunchManager:
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.launch_profiles = self._load_launch_profiles()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ª–∞—É–Ω—á–µ—Ä–æ–≤
        users_path = Path(get_users_path())
        self.scripts_dir = users_path / 'launchers'
        self.scripts_dir.mkdir(parents=True, exist_ok=True)

        self.installed_games_file = users_path / 'installed_games.json'
        self.installed_games = self._load_installed_games()

        # === –ù–û–í–´–ô –ü–£–¢–¨ –î–õ–Ø –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–• –ò–ì–† PS3 ===
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–ø–æ–∫ —Å –∫–æ–¥–∞–º–∏ –¥–∏—Å–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BLUS30001)
        # –≠—Ç–∞ –ø–∞–ø–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è EBOOT.BIN
        self.ps3_games_dir = Path(get_users_subpath("games")) / "PS3"
        self.ps3_games_dir.mkdir(parents=True, exist_ok=True)

    def get_installed_games(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
        if self.installed_games_file.exists():
            try:
                with open(self.installed_games_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}

    def _load_launch_profiles(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"""
        profiles_path = self.project_root / 'app' / 'registry' / 'registry_launch_profiles.json'
        try:
            with open(profiles_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return {}

    def _load_installed_games(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–∞—Ö"""
        try:
            if self.installed_games_file.exists():
                with open(self.installed_games_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ installed_games: {e}")
            return {}

    def _save_installed_games(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–∞—Ö"""
        try:
            self.installed_games_file.parent.mkdir(parents=True, exist_ok=True)
            with open(self.installed_games_file, 'w', encoding='utf-8') as f:
                json.dump(self.installed_games, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è installed_games: {e}")

    def _find_launch_profile_by_name(self, emulator_name: str) -> Optional[Dict[str, Any]]:
        """–ò—â–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for profile_key, profile_data in self.launch_profiles.items():
            if profile_data.get('name') == emulator_name:
                return profile_data

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–ª—é—á—É –ø—Ä–æ—Ñ–∏–ª—è
        if emulator_name in self.launch_profiles:
            return self.launch_profiles[emulator_name]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª–∏–∞—Å—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º
        aliases_path = self.project_root / 'app' / 'registry' / 'registry_platform_aliases.json'
        platform_aliases = {}
        if aliases_path.exists():
            try:
                with open(aliases_path, 'r', encoding='utf-8') as f:
                    aliases_data = json.load(f)
                    platform_aliases = aliases_data.get('platform_aliases', {})
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª–∏–∞—Å—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º: {e}")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –∞–ª–∏–∞—Å—ã
        if emulator_name in platform_aliases:
            alternative_id = platform_aliases[emulator_name]
            # –ò—â–µ–º –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É ID
            for profile_key, profile_data in self.launch_profiles.items():
                if profile_data.get('name') == alternative_id:
                    logger.info(f"üîÅ –ò—Å–ø–æ–ª—å–∑—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π ID –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {alternative_id}")
                    return profile_data
            # –ò–ª–∏ –∏—â–µ–º –ø–æ –∫–ª—é—á—É –ø—Ä–æ—Ñ–∏–ª—è
            if alternative_id in self.launch_profiles:
                logger.info(f"üîÅ –ò—Å–ø–æ–ª—å–∑—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –ø—Ä–æ—Ñ–∏–ª—è: {alternative_id}")
                return self.launch_profiles[alternative_id]

        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_name}'")
        return None

    def _find_appimage(self, emulator_name: str) -> str:
        """–ò—â–µ—Ç —Ñ–∞–π–ª AppImage –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        appimages_dir = self.project_root / 'app' / 'emulators' / 'appimages'

        if not appimages_dir.exists():
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è AppImage –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {appimages_dir}")
            return ""

        # –ò—â–µ–º —Ñ–∞–π–ª—ã AppImage –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for file_path in appimages_dir.iterdir():
            if file_path.is_file() and file_path.suffix == '.AppImage':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞
                filename_lower = file_path.name.lower()
                emulator_name_lower = emulator_name.lower()

                if emulator_name_lower in filename_lower:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω AppImage: {file_path}")
                    return str(file_path)

        logger.error(f"‚ùå AppImage –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_name}' –≤ {appimages_dir}")
        return ""

    def _get_cover_path(self, game_data: dict) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ –∏–≥—Ä—ã"""
        game_id = game_data.get('id')
        platform = game_data.get('platform')

        if not game_id or not platform:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å game_id –∏–ª–∏ platform –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–æ–∂–∫–∏")
            return ""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è images
        images_dir = Path(get_users_subpath("images"))
        cover_dir = images_dir / platform / game_id
        image_extensions = ['.png', '.jpg', '.jpeg', '.bmp', '.webp']

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±–ª–æ–∂–µ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            cover_dir.mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ–±–ª–æ–∂–µ–∫: {cover_dir}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ–±–ª–æ–∂–µ–∫: {e}")
            return ""

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±–ª–æ–∂–∫–∏
        for ext in image_extensions:
            cover_path = cover_dir / f"cover{ext}"
            if cover_path.exists():
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ–±–ª–æ–∂–∫–∞: {cover_path}")
                return str(cover_path)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±–ª–æ–∂–∫–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –Ω–µ—Ç
        default_cover = game_data.get('image_path', '')
        if default_cover:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º
            default_cover_path = Path(default_cover)
            if not default_cover_path.is_absolute():
                # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ project_root
                default_cover_path = self.project_root / default_cover_path

            if default_cover_path.exists():
                logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±–ª–æ–∂–∫–∞: {default_cover_path}")
                return str(default_cover_path)
            else:
                logger.warning(f"‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±–ª–æ–∂–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {default_cover_path}")

        logger.warning(f"‚ö†Ô∏è –ù–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è, –Ω–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∏–≥—Ä—ã {game_id}")
        return ""

    def register_installed_game(self, game_data: dict, install_path: Path):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–≥—Ä—É"""
        game_id = game_data.get('id')
        if game_id:
            self.installed_games[game_id] = {
                'title': game_data.get('title'),
                'platform': game_data.get('platform'),
                'install_path': str(install_path),
                'install_date': time.time(),
                'emulator': game_data.get('preferred_emulator'),
                'game_type': game_data.get('game_type', 'default'),
                'cover_path': self._get_cover_path(game_data),
                'status': 'installed'
            }
            self._save_installed_games()

    def _detect_ps3_game_type(self, game_path: Path) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø PS3 –∏–≥—Ä—ã –ø–æ —Ñ–∞–π–ª—É"""
        if game_path.suffix.lower() == '.pkg':
            return 'pkg'
        elif game_path.suffix.lower() == '.iso':
            return 'iso'
        elif game_path.is_dir():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ –∫–æ—Ä–Ω–µ–º –∏–≥—Ä—ã (–Ω–∞–ª–∏—á–∏–µ PS3_GAME, USRDIR, EBOOT.BIN)
            # –∏–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞ —Å –∫–æ–¥–æ–º –¥–∏—Å–∫–∞.
            if (game_path / 'PS3_GAME').exists() or (game_path / 'USRDIR' / 'EBOOT.BIN').exists() or (game_path / 'EBOOT.BIN').exists():
                return 'folder'
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∫–æ–¥ –¥–∏—Å–∫–∞, —Ç–æ —Å—á–∏—Ç–∞–µ–º –µ–µ EBOOT-–∑–∞–ø—É—Å–∫–æ–º
            elif (game_path / 'EBOOT.BIN').exists() or (game_path.name.startswith(('NPEA', 'NPUA', 'BLES', 'BLUS', 'NPUB', 'BCES', 'BCUS'))):
                return 'eboot'
            else:
                return 'folder' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–∞–ø–∫–∏, –Ω–µ PKG/ISO
        else:
            return 'unknown'

    def _install_pkg(self, pkg_path: Path, platform: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PKG —Ñ–∞–π–ª - –î–û–ñ–ò–î–ê–ï–ú–°–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø –£–°–¢–ê–ù–û–í–ö–ò
        """
        try:
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PKG")

            emulator_path = self._find_appimage('rpcs3')
            if not emulator_path:
                logger.error("‚ùå RPCS3 –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Emulator path: {emulator_path}")
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: PKG path: {pkg_path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            emulator_exists = Path(emulator_path).exists()
            pkg_exists = pkg_path.exists()
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Emulator exists: {emulator_exists}")
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: PKG exists: {pkg_exists}")

            if not emulator_exists or not pkg_exists:
                logger.error("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False

            configs_dir = Path(get_users_subpath("configs"))
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Config dir: {configs_dir / platform}")

            # –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            install_command = [
                emulator_path,
                '--installpkg',
                str(pkg_path)
            ]

            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Command: {install_command}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            env = os.environ.copy()
            env['XDG_CONFIG_HOME'] = str(configs_dir / platform)
            env['SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS'] = '0'

            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Environment: XDG_CONFIG_HOME={env['XDG_CONFIG_HOME']}")

            logger.info(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PKG: {pkg_path.name}")
            logger.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {' '.join(install_command)}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ë–ï–ó –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ (–¥–ª—è GUI)
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–ø—É—Å–∫ subprocess...")

            process = subprocess.Popen(
                install_command,
                env=env
                # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º stdout/stderr PIPE - —ç—Ç–æ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            )

            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Process PID: {process.pid}")
            logger.info(f"üîÑ –ü—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø—É—â–µ–Ω (PID: {process.pid}). –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ë–ï–ó —Ç–∞–π–º–∞—É—Ç–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∑–∞–∫—Ä–æ–µ—Ç –æ–∫–Ω–æ
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            return_code = process.wait()  # –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä–æ–µ—Ç RPCS3

            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Return code: {return_code}")

            if return_code == 0:
                logger.info("‚úÖ PKG —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —ç–º—É–ª—è—Ç–æ—Ä.")
                # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                time.sleep(5)
                return True
            else:
                logger.warning(f"‚ö†Ô∏è RPCS3 –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º: {return_code}. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
                return False

        except Exception as e:
            print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            import traceback
            traceback.print_exc()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PKG: {e}")
            return False

    def _find_ps3_game_code_dir(self) -> Optional[Path]:
        """
        –ò—â–µ—Ç —Å–∞–º—É—é –Ω–æ–≤—É—é –ø–∞–ø–∫—É —Å –∫–æ–¥–æ–º –¥–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BLUS30001) –≤ dev_hdd0/game
        –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PKG.
        """
        try:
            configs_dir = Path(get_users_subpath("configs"))
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø—É—Ç—å: –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É rpcs3
            games_base_dir = configs_dir / "PS3" / "rpcs3" / "dev_hdd0" / "game"

            logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ —Å –∫–æ–¥–æ–º –¥–∏—Å–∫–∞ –≤: {games_base_dir}")

            if not games_base_dir.exists():
                logger.warning(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–≥—Ä RPCS3 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {games_base_dir}")
                # –í—ã–≤–µ–¥–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                parent_dir = games_base_dir.parent
                if parent_dir.exists():
                    contents = [item.name for item in parent_dir.iterdir()]
                    logger.info(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {parent_dir}: {contents}")
                return None

            # –ò—â–µ–º –ø–∞–ø–∫–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–∞–º–∞—è –Ω–æ–≤–∞—è - —Ç–æ–ª—å–∫–æ —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
            game_dirs = [d for d in games_base_dir.iterdir() if d.is_dir() and d.name.startswith(('NPEA', 'NPUA', 'BLES', 'BLUS', 'NPUB', 'BCES', 'BCUS'))]

            if not game_dirs:
                logger.warning("‚ùå –ü–∞–ø–∫–∏ –∏–≥—Ä —Å –∫–æ–¥–∞–º–∏ –¥–∏—Å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                # –í—ã–≤–µ–¥–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                all_dirs = [d.name for d in games_base_dir.iterdir() if d.is_dir()]
                logger.info(f"üìÅ –í—Å–µ –ø–∞–ø–∫–∏ –≤ {games_base_dir}: {all_dirs}")
                return None

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è (mtime)
            game_dirs.sort(key=lambda x: x.stat().st_mtime, reverse=True)

            # –ë–µ—Ä–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é –ø–∞–ø–∫—É
            latest_game_dir = game_dirs[0]
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–¥ –¥–∏—Å–∫–∞: {latest_game_dir.name}")

            return latest_game_dir

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ –¥–∏—Å–∫–∞: {e}")
            return None

    def _move_ps3_game_folder(self, source_path: Path) -> Optional[Path]:
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–∞–ø–∫—É –∏–≥—Ä—ã (–∫–æ–¥ –¥–∏—Å–∫–∞) –∏–∑ –ø–∞–ø–∫–∏ RPCS3 –≤ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –∏–≥—Ä.
        """
        try:
            destination_path = self.ps3_games_dir / source_path.name
            logger.info(f"üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ {source_path.name} –≤ {destination_path}...")

            if destination_path.exists():
                logger.warning(f"‚ö†Ô∏è –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª—è–µ–º –µ—ë: {destination_path}")
                shutil.rmtree(destination_path)

            shutil.move(str(source_path), str(self.ps3_games_dir))
            logger.info(f"‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞.")
            return destination_path

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            return None

    def _find_eboot_after_installation(self, game_dir: Path) -> Optional[Path]:
        """
        –ò—â–µ—Ç EBOOT.BIN –≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ –∏–≥—Ä—ã.
        –ò—â–µ—Ç –∫–∞–∫ –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏, —Ç–∞–∫ –∏ –≤ USRDIR.
        """
        # 1. –ü–æ–∏—Å–∫ –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏ —Å –∫–æ–¥–æ–º –¥–∏—Å–∫–∞
        eboot_root = game_dir / "EBOOT.BIN"
        if eboot_root.exists():
            return eboot_root

        # 2. –ü–æ–∏—Å–∫ –≤ USRDIR
        eboot_usrdir = game_dir / "USRDIR" / "EBOOT.BIN"
        if eboot_usrdir.exists():
            return eboot_usrdir

        logger.error(f"‚ùå EBOOT.BIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ: {game_dir}")
        return None

    # === –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø –õ–ê–£–ù–ß–ï–†–û–í ===

    def create_launcher(self, game_data: dict, game_install_path: Path) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –∏–≥—Ä—ã
        """
        try:
            logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞—É–Ω—á–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã: {game_data.get('title')}")
            logger.info(f"üìÅ –ü—É—Ç—å –∫ –∏–≥—Ä–µ: {game_install_path}")

            emulator_name = game_data.get('preferred_emulator')
            platform = game_data.get('platform')
            game_id = game_data.get('id')

            if not all([emulator_name, platform, game_id]):
                logger.error("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç preferred_emulator, platform –∏–ª–∏ id")
                return False

            # –î–ª—è PS3 –∏–≥—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            if platform == 'PS3' and emulator_name == 'rpcs3':
                return self._create_ps3_launcher(game_data, game_install_path)

            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
            else:
                return self._create_standard_launcher(game_data, game_install_path, platform, game_id, emulator_name)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞: {e}")
            return False

    # === –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø PS3 ===

    def _create_ps3_launcher(self, game_data: dict, game_install_path: Path) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –ª–∞—É–Ω—á–µ—Ä –¥–ª—è PS3 –∏–≥—Ä—ã (PKG, ISO, EBOOT)"""
        try:
            game_id = game_data.get('id')
            game_title = game_data.get('title')

            logger.info(f"üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞—É–Ω—á–µ—Ä–∞ –¥–ª—è PS3: {game_title}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–≥—Ä—ã
            game_type = self._detect_ps3_game_type(game_install_path)
            logger.info(f"üìÅ –¢–∏–ø –∏–≥—Ä—ã: {game_type}")

            # === –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø PKG ===
            if game_type == 'pkg':
                logger.info("üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω PKG —Ñ–∞–π–ª, –Ω–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...")

                # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PKG (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
                success = self._install_pkg(game_install_path, "PS3")
                if not success:
                    return False

                # 2. –ò—â–µ–º –ø–∞–ø–∫—É —Å –∫–æ–¥–æ–º –¥–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞–ª RPCS3
                source_game_dir = self._find_ps3_game_code_dir()
                if not source_game_dir:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É —Å –∫–æ–¥–æ–º –¥–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    return False

                # 3. –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞–ø–∫—É –∏–≥—Ä—ã –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ç–∞–ª–æ–≥
                target_game_dir = self._move_ps3_game_folder(source_game_dir)
                if not target_game_dir:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É –∏–≥—Ä—ã")
                    return False

                # 4. –ò—â–µ–º EBOOT.BIN –≤ –Ω–æ–≤–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
                eboot_path = self._find_eboot_after_installation(target_game_dir)
                if not eboot_path:
                    logger.error("‚ùå EBOOT.BIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ")
                    return False

                # 5. –°–æ–∑–¥–∞–µ–º –ª–∞—É–Ω—á–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π EBOOT.BIN
                return self._create_simple_ps3_launcher(game_data, eboot_path, "eboot")

            # –î–ª—è ISO, EBOOT –∏ FOLDER - —Å–æ–∑–¥–∞–µ–º –ª–∞—É–Ω—á–µ—Ä –Ω–∞–ø—Ä—è–º—É—é
            else:
                # –í —Å–ª—É—á–∞–µ —Ç–∏–ø–∞ folder, —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ game_install_path - —ç—Ç–æ –ø–∞–ø–∫–∞ —Å –∏–≥—Ä–æ–π
                if game_type == 'folder':
                    # –î–ª—è folder (Jailbreak) –ø—É—Ç—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ - —Å–∞–º–∞ –ø–∞–ø–∫–∞
                    game_launch_path = game_install_path
                elif game_type == 'eboot':
                    # –î–ª—è eboot –ø—É—Ç—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ - —ç—Ç–æ EBOOT.BIN –∏–ª–∏ –ø–∞–ø–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞-EBOOT
                    if game_install_path.is_file():
                        game_launch_path = game_install_path
                    else:
                        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –ø–∞–ø–∫—É —Å –∫–æ–¥–æ–º –¥–∏—Å–∫–∞
                        found_eboot = self._find_eboot_after_installation(game_install_path)
                        if found_eboot:
                            game_launch_path = found_eboot
                        else:
                            game_launch_path = game_install_path # Fallback –Ω–∞ –ø–∞–ø–∫—É
                else:
                    # –î–ª—è iso –∏ –¥—Ä—É–≥–∏—Ö
                    game_launch_path = game_install_path

                return self._create_simple_ps3_launcher(game_data, game_launch_path, game_type)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PS3 –ª–∞—É–Ω—á–µ—Ä–∞: {e}")
            return False

    def _create_simple_ps3_launcher(self, game_data: dict, game_path: Path, game_type: str) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è PS3 –∏–≥—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–µ—Å—Ç—Ä–∞.
        """
        try:
            game_id = game_data.get('id')
            game_title = game_data.get('title')
            emulator_name = 'rpcs3' # –í—Å–µ–≥–¥–∞ rpcs3

            # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å RPCS3 –≤ —Ä–µ–µ—Å—Ç—Ä–µ
            profile = self._find_launch_profile_by_name(emulator_name)
            if not profile:
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—Å–∫–∞ –¥–ª—è {emulator_name}")
                return False

            emulator_path = self._find_appimage(emulator_name)
            if not emulator_path:
                logger.error(f"‚ùå {emulator_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º game_types –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ launch_profiles
            if 'game_types' in profile and game_type in profile['game_types']:
                command_template = profile['game_types'][game_type]
            else:
                # –§–æ–ª–±—ç–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω
                command_template = profile.get('command_template', f'"{emulator_path}" --no-gui --fullscreen ' + '"{game_path}"')
                logger.warning(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–∏–ø–∞ '{game_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω.")

            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            template_vars = {
                'emulator_path': f'"{emulator_path}"',
                'game_path': f'"{str(game_path)}"',
            }

            launch_command = command_template.format(**template_vars)

            # === –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥–∞–º PS3 ===
            from core import get_users_subpath
            ps3_config_dir = Path(get_users_subpath("configs")) / "PS3" / "rpcs3"
            ps3_config_dir.mkdir(parents=True, exist_ok=True)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
            env_vars = profile.get('env_variables', {})
            env_script = ""
            for key, value in env_vars.items():
                env_script += f'export {key}="{value}"\n'

            # –î–æ–±–∞–≤–ª—è–µ–º post_launch_actions
            post_actions = profile.get('post_launch_actions', [])
            post_actions_script = "\n".join(post_actions) + "\n" if post_actions else ""

            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
            script_content = f"""#!/bin/bash
    cd "{self.project_root}"

    # === –í–ê–ñ–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥–∞–º PS3 ===
    export XDG_CONFIG_HOME="{ps3_config_dir.parent}"  # –ü–∞–ø–∫–∞ PS3, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è rpcs3
    export XDG_DATA_HOME="{ps3_config_dir}"
    export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS="0"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    {env_script}

    echo "üéÆ –ó–∞–ø—É—Å–∫ {game_title}..."
    echo "üöÄ –ö–æ–º–∞–Ω–¥–∞: {launch_command}"
    echo "üìÅ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ps3_config_dir}"

    # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    {launch_command}

    # –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    {post_actions_script}

    echo "üîö –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    """

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
            launcher_path = self.scripts_dir / f"{game_id}.sh"
            with open(launcher_path, 'w', encoding='utf-8') as f:
                f.write(script_content)

            launcher_path.chmod(0o755)

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ª–∞—É–Ω—á–µ—Ä: {launcher_path}")
            logger.info(f"üìÅ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ PS3: {ps3_config_dir}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
            self.installed_games[game_id] = {
                'title': game_title,
                'platform': 'PS3',
                'install_path': str(game_path),
                'install_date': time.time(),
                'emulator': 'rpcs3',
                'game_type': game_type,
                'launcher_path': str(launcher_path),
                'status': 'installed'
            }
            self._save_installed_games()

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞: {e}")
            return False

    # === –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –í–°–ï–• –î–†–£–ì–ò–• –≠–ú–£–õ–Ø–¢–û–†–û–í ===

    def _create_standard_launcher(self, game_data: dict, game_install_path: Path,
                                platform: str, game_id: str, emulator_name: str) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –∏–≥—Ä—ã (–¥–ª—è –≤—Å–µ—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –∫—Ä–æ–º–µ PS3)"""
        try:
            logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ª–∞—É–Ω—á–µ—Ä–∞ –¥–ª—è: {game_data.get('title')}")

            # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å —ç–º—É–ª—è—Ç–æ—Ä–∞
            profile = self._find_launch_profile_by_name(emulator_name)
            if not profile:
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_name}'")
                return False

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —ç–º—É–ª—è—Ç–æ—Ä—É
            installation_type = profile.get('installation_type', 'flatpak')
            emulator_path = ""

            if installation_type == 'appimage':
                emulator_path = self._find_appimage(emulator_name)
                if not emulator_path:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ AppImage –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_name}'")
                    return False
            else:
                emulator_path = profile.get('flatpak_id', '')
                logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Flatpak: {emulator_path}")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            configs_dir = Path(get_users_subpath("configs"))
            bios_dir = Path(get_users_subpath("bios")) / platform

            template_vars = {
                'config_dir': f'"{str(configs_dir / platform)}"',
                'game_path': f'"{str(game_install_path)}"',
                'game_id': game_id,
                'project_root': f'"{str(self.project_root)}"',
                'emulator_name': emulator_name,
                'emulator_path': emulator_path,
                'flatpak_id': emulator_path,
                'bios_dir': f'"{str(bios_dir)}"'
            }

            # === –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ game_types –≤ —Ä–µ–µ—Å—Ç—Ä–µ ===
            game_type = game_data.get('game_type', 'default')
            if 'game_types' in profile and game_type in profile['game_types']:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–∏–ø–∞ –∏–≥—Ä—ã
                command_template = profile['game_types'][game_type]
                launch_command = command_template.format(**template_vars)
                logger.info(f"üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–∏–ø–∞ –∏–≥—Ä—ã: {game_type}")

            # === –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ===
            elif emulator_name == 'duckstation':
                launch_command = self._get_duckstation_launch_command(
                    emulator_path, game_install_path, configs_dir / platform
                )
            elif emulator_name == 'pcsx2':
                launch_command = self._get_pcsx2_launch_command(
                    emulator_path, game_install_path, configs_dir / platform
                )
            elif emulator_name == 'ppsspp':
                launch_command = self._get_ppsspp_launch_command(
                    emulator_path, game_install_path, configs_dir / platform
                )
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                command_template = profile.get('command_template')
                if not command_template:
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω command_template –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_name}'")
                    return False
                launch_command = command_template.format(**template_vars)

            # === –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ ===
            env_vars = profile.get('env_variables', {})
            env_script = ""
            for key, value in env_vars.items():
                env_script += f'export {key}="{value}"\n'

            # === –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º post_launch_actions ===
            post_actions = profile.get('post_launch_actions', [])
            post_actions_script = "\n".join(post_actions) + "\n" if post_actions else ""

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
            script_content = f"""#!/bin/bash
cd "{self.project_root}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞
export XDG_CONFIG_HOME="{configs_dir / platform}"
export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS="0"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
{env_script}

echo "üéÆ –ó–∞–ø—É—Å–∫ {emulator_name}..."

# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
{launch_command}

# –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
{post_actions_script}

echo "‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
"""

            # –ü—É—Ç—å –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ª–∞—É–Ω—á–µ—Ä—É
            final_launcher_path = self.scripts_dir / f"{game_id}.sh"

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            with open(final_launcher_path, 'w', encoding='utf-8') as f:
                f.write(script_content)

            # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            final_launcher_path.chmod(0o755)

            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä: {final_launcher_path}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
            self.installed_games[game_id] = {
                'title': game_data.get('title'),
                'platform': platform,
                'install_path': str(game_install_path),
                'install_date': time.time(),
                'emulator': emulator_name,
                'launcher_path': str(final_launcher_path),
                'status': 'installed'
            }
            self._save_installed_games()

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ª–∞—É–Ω—á–µ—Ä–∞: {e}")
            return False

    # === –ú–ï–¢–û–î–´ –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–´–• –≠–ú–£–õ–Ø–¢–û–†–û–í (–°–û–•–†–ê–ù–ï–ù–´!) ===

    def _get_duckstation_launch_command(self, emulator_path: str, game_path: Path, config_dir: Path) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –¥–ª—è DuckStation (PS1)"""
        return f'"{emulator_path}" -fullscreen -- "{game_path}"'

    def _get_pcsx2_launch_command(self, emulator_path: str, game_path: Path, config_dir: Path) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –¥–ª—è PCSX2 (PS2)"""
        return f'"{emulator_path}" -fullscreen -- "{game_path}"'

    def _get_ppsspp_launch_command(self, emulator_path: str, game_path: Path, config_dir: Path) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞ –¥–ª—è PPSSPP (PSP) - –¢–û–õ–¨–ö–û –î–õ–Ø FLATPAK"""
        # –î–ª—è PPSSPP –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º flatpak run, –¥–∞–∂–µ –µ—Å–ª–∏ emulator_path —ç—Ç–æ Flatpak ID
        return f'XDG_CONFIG_HOME="{config_dir}" flatpak run {emulator_path} "{game_path}"'

    # === –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –õ–ê–£–ù–ß–ï–†–û–í –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ò–ì–† ===

    def create_custom_launcher(self, game_title: str, game_path: Path, platform: str,
                             emulator_name: str, game_id: str = None) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–≥—Ä—ã"""
        try:
            if game_id is None:
                game_id = f"custom_{int(time.time())}"

            game_data = {
                'id': game_id,
                'title': game_title,
                'platform': platform,
                'preferred_emulator': emulator_name
            }

            # –î–ª—è PS3 –∏–≥—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
            if platform == 'PS3' and emulator_name == 'rpcs3':
                game_type = self._detect_ps3_game_type(game_path)
                return self._create_simple_ps3_launcher(game_data, game_path, game_type)
            else:
                return self._create_standard_launcher(game_data, game_path, platform, game_id, emulator_name)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ª–∞—É–Ω—á–µ—Ä–∞: {e}")
            return False

    def create_iso_launcher(self, game_title: str, iso_path: Path, platform: str,
                          emulator_name: str, game_id: str = None) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –ª–∞—É–Ω—á–µ—Ä –¥–ª—è ISO –∏–≥—Ä—ã"""
        return self.create_custom_launcher(game_title, iso_path, platform, emulator_name, game_id)

    def create_eboot_launcher(self, game_title: str, eboot_path: Path, platform: str,
                            game_id: str = None) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –∏–≥—Ä—ã –∏–∑ EBOOT.BIN"""
        return self.create_custom_launcher(game_title, eboot_path, platform, 'rpcs3', game_id)

    # === –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–°–û–•–†–ê–ù–ï–ù–´) ===

    def get_install_info(self, game_id: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–≥—Ä—ã"""
        return self.installed_games.get(game_id)

    def is_game_installed(self, game_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞"""
        return game_id in self.installed_games

    def launch_game(self, game_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç-–ª–∞—É–Ω—á–µ—Ä"""
        game_info = self.installed_games.get(game_id)
        if not game_info:
            logger.error(f"‚ùå –ò–≥—Ä–∞ {game_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return False

        launcher_path = Path(game_info.get('launcher_path', ''))
        if not launcher_path.exists():
            logger.error(f"‚ùå –õ–∞—É–Ω—á–µ—Ä –¥–ª—è –∏–≥—Ä—ã {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        try:
            subprocess.Popen(['bash', str(launcher_path)], start_new_session=True)
            logger.info(f"üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É {game_id}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")
            return False

    def uninstall_game(self, game_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∏–≥—Ä—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
        try:
            if game_id in self.installed_games:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ª–∞—É–Ω—á–µ—Ä–∞
                launcher_path = Path(self.installed_games[game_id].get('launcher_path', ''))
                if launcher_path.exists():
                    launcher_path.unlink()

                # –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
                del self.installed_games[game_id]
                self._save_installed_games()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
        return False
