#!/usr/bin/env python3
import subprocess
import json
from pathlib import Path
import logging
import time
from datetime import datetime
from PyQt6.QtCore import QObject, pyqtSignal
import importlib.util

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger('EmulatorManager')

class EmulatorManager(QObject):
    def __init__(self, project_root: Path, test_mode=False):
        super().__init__()
        self.project_root = project_root
        self.test_mode = test_mode
        self._cancelled = False

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        self.platform_configs = self._load_all_platform_configs()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(self.platform_configs)}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–ª–∏–∞—Å—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º
        self.platform_aliases = {}
        aliases_path = self.project_root / "app" / "registry" / "registry_platform_aliases.json"
        if aliases_path.exists():
            try:
                with open(aliases_path, 'r', encoding='utf-8') as f:
                    aliases_data = json.load(f)
                    self.platform_aliases = aliases_data.get('platform_aliases', {})
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–ª–∏–∞—Å–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(self.platform_aliases)}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä –∞–ª–∏–∞—Å–æ–≤: {e}")

    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ UI
    progress_updated = pyqtSignal(int, str)

    def _load_all_platform_configs(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏–∑ –ø–∞–ø–æ–∫ platforms/"""
        platforms_dir = self.project_root / "app" / "registry" / "platforms"
        configs = {}

        if not platforms_dir.exists():
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {platforms_dir}")
            return configs

        for platform_dir in platforms_dir.iterdir():
            if platform_dir.is_dir():
                config = self._load_platform_config(platform_dir.name)
                if config:
                    configs[platform_dir.name] = config
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platform_dir.name}")

        return configs

    def _load_platform_config(self, platform_name: str) -> dict | None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        config_file = self.project_root / "app" / "registry" / "platforms" / platform_name / "config.py"

        if not config_file.exists():
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
            return None

        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
            spec = importlib.util.spec_from_file_location(f"{platform_name}_config", config_file)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)

            if hasattr(module, 'get_config'):
                config = module.get_config()
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                config['id'] = platform_name
                return config
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é get_config")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform_name}: {e}")
            return None

    def get_emulator_info_for_game(self, game_data: dict) -> dict | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã.
        –ò—â–µ—Ç –ø–æ platform_module, platform –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞.
        """
        game_title = game_data.get('title', 'Unknown Game')

        # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ platform_module (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
        platform_module = game_data.get('platform_module')
        if platform_module and platform_module in self.platform_configs:
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω —ç–º—É–ª—è—Ç–æ—Ä –ø–æ platform_module '{platform_module}' –¥–ª—è –∏–≥—Ä—ã '{game_title}'")
            return self.platform_configs[platform_module]

        # 2. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ platform (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        platform = game_data.get('platform', '')
        if platform:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (—Ä–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º–æ)
            if platform in self.platform_configs:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω —ç–º—É–ª—è—Ç–æ—Ä –ø–æ platform '{platform}' –¥–ª—è –∏–≥—Ä—ã '{game_title}'")
                return self.platform_configs[platform]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–∏–∞—Å—ã (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
            platform_lower = platform.lower()
            for alias, actual_platform in self.platform_aliases.items():
                if alias.lower() == platform_lower and actual_platform in self.platform_configs:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω —ç–º—É–ª—è—Ç–æ—Ä –ø–æ –∞–ª–∏–∞—Å—É '{platform}' -> '{actual_platform}' –¥–ª—è –∏–≥—Ä—ã '{game_title}'")
                    return self.platform_configs[actual_platform]

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º preferred_emulator –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
        preferred_emulator = game_data.get('preferred_emulator')
        if preferred_emulator:
            # –ò—â–µ–º –∞–ª–∏–∞—Å –¥–ª—è preferred_emulator (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
            preferred_lower = preferred_emulator.lower()
            for alias, actual_platform in self.platform_aliases.items():
                if alias.lower() == preferred_lower and actual_platform in self.platform_configs:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω —ç–º—É–ª—è—Ç–æ—Ä –ø–æ preferred_emulator '{preferred_emulator}' -> '{actual_platform}' –¥–ª—è –∏–≥—Ä—ã '{game_title}'")
                    return self.platform_configs[actual_platform]

        # 4. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –∏–≥—Ä—ã, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        file_path = game_data.get('file_name') or game_data.get('path', '')
        if file_path and '.' in file_path:
            file_extension = '.' + file_path.split('.')[-1].lower()
            emulator_info = self._find_emulator_by_extension(file_extension)
            if emulator_info:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω —ç–º—É–ª—è—Ç–æ—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é '{file_extension}' –¥–ª—è –∏–≥—Ä—ã '{game_title}'")
                return emulator_info

        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –¥–ª—è –∏–≥—Ä—ã '{game_title}': platform_module={platform_module}, platform={platform}, preferred_emulator={preferred_emulator}")
        return None

    def _find_emulator_by_extension(self, extension: str) -> dict | None:
        """
        –ò—â–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞.
        """
        for platform_id, platform_info in self.platform_configs.items():
            supported_formats = platform_info.get('supported_formats', [])
            if extension in supported_formats:
                logger.info(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ '{extension}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ '{platform_id}'")
                return platform_info
        return None

    def ensure_emulator_for_game(self, game_data: dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã.
        """
        if self._cancelled:
            return False

        game_title = game_data.get('title', 'Unknown Game')
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —ç–º—É–ª—è—Ç–æ—Ä –¥–ª—è –∏–≥—Ä—ã: {game_title}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
        emulator_info = self.get_emulator_info_for_game(game_data)
        if not emulator_info:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –¥–ª—è –∏–≥—Ä—ã: {game_title}")
            self.progress_updated.emit(0, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä –¥–ª—è {game_title}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º ID —ç–º—É–ª—è—Ç–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π)
        emulator_id = emulator_info.get('id')
        if not emulator_id:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞ –∏–≥—Ä—ã '{game_title}'")
            return False

        return self.ensure_emulator(emulator_id, emulator_info)

    def ensure_emulator(self, emulator_id: str, emulator_info: dict = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º—É–ª—è—Ç–æ—Ä –ø–æ ID.
        """
        if self._cancelled:
            return False

        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞: {emulator_id}")

        if not emulator_info:
            emulator_info = self.platform_configs.get(emulator_id)
            if not emulator_info:
                logger.error(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ '{emulator_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.")
                return False

        install_method = emulator_info.get('install_method')

        if install_method == 'flatpak':
            return self._ensure_flatpak(emulator_info)
        elif install_method == 'system':
            logger.info(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä '{emulator_id}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É")
            return True
        elif install_method == 'none':
            logger.info(f"‚úÖ –≠–º—É–ª—è—Ç–æ—Ä '{emulator_id}' –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return True
        else:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_method}")
            return False

    def _is_flatpak_installed(self, flatpak_id: str) -> bool:
        try:
            res = subprocess.run(["flatpak", "list"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=10)
            return flatpak_id in res.stdout
        except (FileNotFoundError, subprocess.TimeoutExpired):
            logger.warning("‚ö†Ô∏è flatpak –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
            return False

    def _ensure_flatpak(self, emu_info: dict) -> bool:
        if self._cancelled:
            return False

        flatpak_id = emu_info.get('flatpak_id')
        name = emu_info.get('name')
        logger.info(f"‚¨áÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Flatpak-–ø–∞–∫–µ—Ç–∞: {flatpak_id} ({name})")

        if self._cancelled:
            return False

        if self.test_mode:
            logger.info("[TEST MODE] –°–∏–º—É–ª—è—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Flatpak")
            return True

        try:
            if self._is_flatpak_installed(flatpak_id):
                self.progress_updated.emit(100, f"‚úÖ {name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Flatpak")
                return True
            else:
                self.progress_updated.emit(10, f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {name} —á–µ—Ä–µ–∑ Flatpak...")
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ --noninteractive –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                install_command = ["flatpak", "install", "--noninteractive", "flathub", flatpak_id, "-y"]

                process = subprocess.Popen(
                    install_command,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    bufsize=1
                )

                # –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–≤–æ–¥–∞
                for line in process.stdout:
                    if self._cancelled:
                        process.terminate()
                        return False
                    self.progress_updated.emit(50, line.strip())

                process.wait(timeout=300)  # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç

                if self._cancelled:
                    return False

                if process.returncode == 0:
                    self.progress_updated.emit(100, f"‚úÖ {name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                    return True
                else:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Flatpak: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}"
                    self.progress_updated.emit(0, error_msg)
                    logger.error(error_msg)
                    return False
        except subprocess.CalledProcessError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Flatpak: {e.stderr}"
            self.progress_updated.emit(0, error_msg)
            logger.error(error_msg)
            return False
        except FileNotFoundError:
            error_msg = "‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'flatpak' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ PATH."
            self.progress_updated.emit(0, error_msg)
            logger.error(error_msg)
            return False
        except subprocess.TimeoutExpired:
            error_msg = "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Flatpak –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
            self.progress_updated.emit(0, error_msg)
            logger.error(error_msg)
            return False
        except Exception as e:
            error_msg = f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Flatpak: {e}"
            self.progress_updated.emit(0, error_msg)
            logger.error(error_msg)
            return False

    def get_supported_formats(self, emulator_id: str) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞.
        """
        emulator_info = self.platform_configs.get(emulator_id)
        if emulator_info and 'supported_formats' in emulator_info:
            return emulator_info['supported_formats']
        return []

    def cancel(self):
        self._cancelled = True
