#!/usr/bin/env python3
import subprocess
import json
from pathlib import Path
import logging
import time
from datetime import datetime
import platform as sys_platform

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger('EmulatorManager')


class EmulatorManager:
    def __init__(self, project_root: Path, test_mode=False):
        self.project_root = project_root
        self.test_mode = test_mode
        # read registry platforms if present in app/registry
        registry_path = self.project_root / "app" / "registry" / "registry_platforms.json"
        self.registry = {}
        if registry_path.exists():
            try:
                with open(registry_path, 'r', encoding='utf-8') as f:
                    self.registry = json.load(f)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º: {e}")

    def get_emulator_info(self, emulator_id: str) -> dict | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        return self.registry.get(emulator_id)

    def ensure_emulator(self, emulator_id: str) -> bool:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞: {emulator_id}")
        time.sleep(0.5)

        emu_info = self.registry.get(emulator_id) or {}
        install_method = emu_info.get('install_method')
        flatpak_id = emu_info.get('flatpak_id')

        # Special-case PPSSPP: try flatpak on Linux (Steam Deck)
        if flatpak_id and sys_platform.system().lower() == 'linux' and install_method == 'flatpak':
            return self._ensure_flatpak(flatpak_id, emu_info.get('name', emulator_id))

        # Otherwise, check for local platform folder (app/emulators/<emulator_id>)
        local_path = self.project_root / 'app' / 'emulators' / emulator_id
        if local_path.exists():
            self._log(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —ç–º—É–ª—è—Ç–æ—Ä–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: {local_path}")
            return True

        # not found locally: in test_mode we simulate ok, otherwise fail
        if self.test_mode:
            self._log(f"[TEST MODE] –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
            return True
        else:
            self._log(f"‚ùå –≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ test_mode=False ‚Äî –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
            return False

    def get_supported_formats(self, emulator_id: str) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞.
        """
        emu_info = self.get_emulator_info(emulator_id)
        if emu_info and 'supported_formats' in emu_info:
            return emu_info['supported_formats']
        return []

    def _is_flatpak_installed(self, flatpak_id: str) -> bool:
        try:
            res = subprocess.run(["flatpak", "list"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            return flatpak_id in res.stdout
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è flatpak –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return False

    def _ensure_flatpak(self, flatpak_id: str, name: str) -> bool:
        logger.info(f"‚¨áÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Flatpak-–ø–∞–∫–µ—Ç–∞: {flatpak_id} ({name})")
        time.sleep(0.5) # <-- –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        if self.test_mode:
            logger.info("[TEST MODE] –°–∏–º—É–ª—è—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Flatpak")
            return True
        try:
            if self._is_flatpak_installed(flatpak_id):
                logger.info(f"‚úÖ {name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Flatpak")
                return True

        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Flatpak: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Flatpak: {e}")
            return False
