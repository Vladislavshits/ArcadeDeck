#!/usr/bin/env python3
import subprocess
import json
from pathlib import Path
import logging
import time
from datetime import datetime
from PyQt6.QtCore import QObject, pyqtSignal

import platform as sys_platform

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger('EmulatorManager')

class EmulatorManager(QObject):
    def __init__(self, project_root: Path, test_mode=False):
        super().__init__()
        self.project_root = project_root
        self.test_mode = test_mode
        self._cancelled = False
        # read registry platforms if present in app/registry
        registry_path = self.project_root / "app" / "registry" / "registry_platforms.json"
        self.registry = {}
        if registry_path.exists():
            try:
                with open(registry_path, 'r', encoding='utf-8') as f:
                    self.registry = json.load(f)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–µ—Å—Ç—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º: {e}")

    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ UI
    progress_updated = pyqtSignal(int, str)

    def get_emulator_info(self, emulator_id: str) -> dict | None:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        return self.registry.get(emulator_id)

    def ensure_emulator(self, emulator_id: str) -> bool:
        if self._cancelled:
            return False
            
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞: {emulator_id}")

        emu_info = self.registry.get(emulator_id) or {}
        install_method = emu_info.get('install_method')

        if not emu_info:
            logger.error(f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ '{emulator_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–∞.")
            return False

        if install_method == 'flatpak':
            return self._ensure_flatpak(emu_info)
        else:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {install_method}")
            return False

    def _is_flatpak_installed(self, flatpak_id: str) -> bool:
        try:
            res = subprocess.run(["flatpak", "list"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=10)
            return flatpak_id in res.stdout
        except (FileNotFoundError, subprocess.TimeoutExpired):
            logger.warning("‚ö†Ô∏è flatpak –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
            return False

    def _ensure_flatpak(self, emu_info: dict) -> bool:
        if self._cancelled:
            return False
            
        flatpak_id = emu_info.get('flatpak_id')
        name = emu_info.get('name')
        logger.info(f"‚¨áÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞/—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Flatpak-–ø–∞–∫–µ—Ç–∞: {flatpak_id} ({name})")
        
        if self._cancelled:
            return False
            
        if self.test_mode:
            logger.info("[TEST MODE] –°–∏–º—É–ª—è—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Flatpak")
            return True
            
        try:
            if self._is_flatpak_installed(flatpak_id):
                self.progress_updated.emit(100, f"‚úÖ {name} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Flatpak")
                return True
            else:
                self.progress_updated.emit(10, f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {name} —á–µ—Ä–µ–∑ Flatpak...")
                install_command = emu_info.get('install_command')
                if install_command:
                    process = subprocess.Popen(
                        install_command,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT,
                        text=True,
                        bufsize=1
                    )

                    # –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–≤–æ–¥–∞
                    for line in process.stdout:
                        if self._cancelled:
                            process.terminate()
                            return False
                        self.progress_updated.emit(50, line.strip())

                    process.wait(timeout=300)  # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç
                    
                    if self._cancelled:
                        return False
                        
                    if process.returncode == 0:
                        self.progress_updated.emit(100, f"‚úÖ {name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                        return True
                    else:
                        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Flatpak: –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}"
                        self.progress_updated.emit(0, error_msg)
                        logger.error(error_msg)
                        return False
                else:
                    logger.error(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞: {flatpak_id}")
                    return False
        except subprocess.CalledProcessError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Flatpak: {e.stderr}"
            self.progress_updated.emit(0, error_msg)
            logger.error(error_msg)
            return False
        except FileNotFoundError:
            error_msg = "‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'flatpak' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ PATH."
            self.progress_updated.emit(0, error_msg)
            logger.error(error_msg)
            return False
        except subprocess.TimeoutExpired:
            error_msg = "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Flatpak –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
            self.progress_updated.emit(0, error_msg)
            logger.error(error_msg)
            return False
        except Exception as e:
            error_msg = f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Flatpak: {e}"
            self.progress_updated.emit(0, error_msg)
            logger.error(error_msg)
            return False

    def get_supported_formats(self, emulator_id: str) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞.
        """
        emu_info = self.get_emulator_info(emulator_id)
        if emu_info and 'supported_formats' in emu_info:
            return emu_info['supported_formats']
        return []

    def cancel(self):
        self._cancelled = True
