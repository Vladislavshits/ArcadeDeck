#!/usr/bin/env python3
import logging
from pathlib import Path
from PyQt6.QtCore import QObject, pyqtSignal, QThread

logger = logging.getLogger('ArchiveExtractor')

class ArchiveExtractor(QThread):
    progress_updated = pyqtSignal(int, str)
    finished = pyqtSignal()
    error_occurred = pyqtSignal(str)

    def __init__(self, game_data: dict, download_dir: Path, parent=None):
        super().__init__(parent)
        self.game_data = game_data
        self.download_dir = download_dir
        self._cancelled = False

    def _is_archive_file(self, file_path: Path) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º.
        Pure Python - –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!
        """
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é (–±—ã—Å—Ç—Ä–æ –∏ –ø—Ä–æ—Å—Ç–æ)
        archive_extensions = [
            '.zip', '.rar', '.7z', '.tar', '.gz', '.bz2', '.xz',
            '.tgz', '.tbz2', '.txz', '.tar.gz', '.tar.bz2', '.tar.xz',
            '.cab', '.arj', '.lzh', '.lha', '.z', '.Z'
        ]
        
        if file_path.suffix.lower() in archive_extensions:
            logger.info(f"üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {file_path.suffix}")
            return True
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º (–º–∞–≥–∏—á–µ—Å–∫–∏–º —á–∏—Å–ª–∞–º) - –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
        try:
            with open(file_path, 'rb') as f:
                header = f.read(12)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 12 –±–∞–π—Ç
            
            # –°–∏–≥–Ω–∞—Ç—É—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            archive_signatures = {
                b'PK\x03\x04': 'ZIP',
                b'Rar!\x1A\x07\x00': 'RAR5',
                b'Rar!\x1A\x07\x01': 'RAR5',
                b'7z\xBC\xAF\x27\x1C': '7ZIP',
                b'\x1F\x8B\x08': 'GZIP',
                b'BZh': 'BZIP2',
                b'\xFD7zXZ\x00': 'XZ',
                b'\x1F\x9D': 'TAR.Z (compress)',
                b'\x1F\xA0': 'TAR.Z (compress)',
                b'# archiver': 'ARJ',
                b'!<arch>': 'AR (Unix)',
                b'\x60\xEA': 'AR (Unix)',
                b'MSZIP': 'CAB (Microsoft)',
                b'MSCF': 'CAB (Microsoft)',
                b'-lh': 'LHA/LZH',
                b'-lz': 'LHA/LZH'
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
            for signature, format_name in archive_signatures.items():
                if header.startswith(signature):
                    logger.info(f"üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: {format_name}")
                    return True
            
            # 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è TAR –∞—Ä—Ö–∏–≤–æ–≤
            if len(header) >= 512:
                # TAR –∞—Ä—Ö–∏–≤—ã –∏–º–µ—é—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ø–µ—Ä–≤—ã—Ö 512 –±–∞–π—Ç–∞—Ö
                # ustar magic –≤ –ø–æ–∑–∏—Ü–∏–∏ 257-262
                if header[257:262] == b'ustar' or header[257:263] == b'ustar ':
                    logger.info("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ TAR (ustar)")
                    return True
                
                # GNU tar magic
                if header[257:263] == b'ustar\x00':
                    logger.info("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ TAR (GNU)")
                    return True
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö RAR —Ñ–æ—Ä–º–∞—Ç–æ–≤
            if header.startswith(b'Rar!\x1A\x07'):
                logger.info("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ RAR (—Å—Ç–∞—Ä–∞—è)")
                return True
            
            # 5. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üîç –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {header[:8].hex(' ').upper()}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ–∞–π–ª–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è, –¥–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            return file_path.suffix.lower() in archive_extensions
        
        # 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π –∏ –Ω–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è,
        # –Ω–æ –µ—Å—Ç—å –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ - —Å—á–∏—Ç–∞–µ–º –∞—Ä—Ö–∏–≤–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        file_size = file_path.stat().st_size
        if file_size > 1024 * 1024:  # > 1MB
            logger.info(f"üì¶ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –±–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, —Å—á–∏—Ç–∞–µ–º –∞—Ä—Ö–∏–≤–æ–º (—Ä–∞–∑–º–µ—Ä: {file_size} bytes)")
            return True
        
        return False

    def _get_downloaded_file(self) -> Path:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            files = list(self.download_dir.iterdir())
            if not files:
                logger.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Å—Ç–∞")
                return None

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–µ –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª)
            for file_path in files:
                if file_path.is_file() and not file_path.name.startswith('.'):
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path.name} (—Ä–∞–∑–º–µ—Ä: {file_path.stat().st_size} bytes)")
                    return file_path

            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return None

    def _extract_archive(self, archive_path: Path):
        """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤ —Å –ø–æ–º–æ—â—å—é libarchive —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            import libarchive

            logger.info(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤ {archive_path.name} —Å –ø–æ–º–æ—â—å—é libarchive...")
            self.progress_updated.emit(0, "üìä –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ...")

            # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            total_files = 0
            total_size = 0
            with libarchive.file_reader(str(archive_path)) as archive:
                for entry in archive:
                    if entry.isdir:
                        continue
                    total_files += 1
                    total_size += entry.size

            if total_files == 0:
                logger.warning("‚ö†Ô∏è –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
                self.progress_updated.emit(100, "‚úÖ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç - –Ω–µ—á–µ–≥–æ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å")
                return

            logger.info(f"üìä –í –∞—Ä—Ö–∏–≤–µ {total_files} —Ñ–∞–π–ª–æ–≤, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size} bytes")
            self.progress_updated.emit(0, f"üì¶ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É {total_files} —Ñ–∞–π–ª–æ–≤...")

            # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            extracted_files = 0
            extracted_size = 0

            with libarchive.file_reader(str(archive_path)) as archive:
                for entry in archive:
                    if self._cancelled:
                        break

                    if entry.isdir:
                        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                        target_dir = self.download_dir / entry.pathname
                        target_dir.mkdir(parents=True, exist_ok=True)
                        continue

                    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    target_file = self.download_dir / entry.pathname
                    target_file.parent.mkdir(parents=True, exist_ok=True)

                    with open(target_file, 'wb') as f:
                        for block in entry.get_blocks():
                            if self._cancelled:
                                break
                            f.write(block)
                            extracted_size += len(block)

                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ä–∞–∑–º–µ—Ä—É
                            if total_size > 0:
                                size_progress = int((extracted_size / total_size) * 100)
                                self.progress_updated.emit(
                                    size_progress,
                                    f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞: {size_progress}% ({extracted_size}/{total_size} bytes)"
                                )

                    extracted_files += 1

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∞–π–ª–æ–≤
                    files_progress = int((extracted_files / total_files) * 100)
                    self.progress_updated.emit(
                        files_progress,
                        f"üìÑ –§–∞–π–ª–æ–≤: {extracted_files}/{total_files} ({files_progress}%)"
                    )

            if not self._cancelled:
                # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
                archive_path.unlink()
                logger.info(f"‚úÖ –ê—Ä—Ö–∏–≤ —É–¥–∞–ª–µ–Ω: {archive_path.name}")
                self.progress_updated.emit(100, f"‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ {extracted_files} —Ñ–∞–π–ª–æ–≤")

        except ImportError:
            raise Exception("libarchive –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install libarchive-c")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞ {archive_path.name}: {e}")

    def run(self):
        if self._cancelled:
            self.progress_updated.emit(0, "‚ùå –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–æ –Ω–∞—á–∞–ª–∞.")
            return

        # –ò—â–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        downloaded_file = self._get_downloaded_file()
        if not downloaded_file:
            self.error_occurred.emit("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {downloaded_file.name}")
        logger.info(f"üìã –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {downloaded_file.suffix}")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {downloaded_file.stat().st_size} bytes")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º
        is_archive = self._is_archive_file(downloaded_file)
        logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏–≤–∞: {is_archive}")

        if not is_archive:
            message = f"‚úÖ –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—Ä—Ö–∏–≤–æ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å: {downloaded_file.name}"
            logger.info(message)
            self.progress_updated.emit(100, message)
            self.finished.emit()
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –∞—Ä—Ö–∏–≤ - —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
        try:
            logger.info(f"üì¶ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É: {downloaded_file.name}")
            self.progress_updated.emit(0, f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {downloaded_file.name}")

            self._extract_archive(downloaded_file)

            if not self._cancelled:
                success_message = "‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                logger.info(success_message)
                self.progress_updated.emit(100, success_message)
                self.finished.emit()

        except Exception as e:
            if not self._cancelled:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {e}"
                logger.error(f"‚ùå {error_msg}")
                self.error_occurred.emit(error_msg)

    def cancel(self):
        self._cancelled = True
        logger.info("üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏")
