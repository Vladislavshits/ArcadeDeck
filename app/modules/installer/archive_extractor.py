#!/usr/bin/env python3
import logging
from pathlib import Path
from PyQt6.QtCore import QObject, pyqtSignal, QThread
import time
import subprocess
import shutil

logger = logging.getLogger('ArchiveExtractor')

class ArchiveExtractor(QThread):
    progress_updated = pyqtSignal(int, str)
    finished = pyqtSignal()
    error_occurred = pyqtSignal(str)
    files_extracted = pyqtSignal(list)

    def __init__(self, game_data: dict, download_dir: Path, parent=None):
        super().__init__(parent)
        self.game_data = game_data
        self.download_dir = download_dir
        self._cancelled = False
        self.last_update_time = 0
        self.update_interval = 0.5
        self.extracted_files = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._ensure_dependencies()

    def _ensure_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            import rarfile
            logger.info("‚úÖ rarfile –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            logger.warning("‚ö†Ô∏è rarfile –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. RAR –∞—Ä—Ö–∏–≤—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")

    def _is_archive_file(self, file_path: Path) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é.
        """
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–æ–≤
        archive_extensions = [
            '.zip', '.rar', '.7z', '.tar',
            '.gz', '.bz2', '.xz', '.tgz',
            '.tbz2', '.txz', '.tar.gz', '.tar.bz2', '.tar.xz',
            '.cab', '.arj', '.lzh', '.lha'
        ]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ PKG (–¥–ª—è PS3)
        if file_path.suffix.lower() == '.pkg':
            logger.info(f"üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω PKG —Ñ–∞–π–ª: {file_path.name}")
            return False  # –ù–µ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å PKG!

        if file_path.suffix.lower() in archive_extensions:
            logger.info(f"üìã –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∞—Ä—Ö–∏–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {file_path.suffix}")
            return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä
        try:
            with open(file_path, 'rb') as f:
                header = f.read(12)

            archive_signatures = {
                b'PK\x03\x04': 'ZIP',
                b'Rar!\x1A\x07\x00': 'RAR5',
                b'Rar!\x1A\x07\x01': 'RAR5',
                b'Rar!\x1A\x07': 'RAR',
                b'7z\xBC\xAF\x27\x1C': '7ZIP',
                b'\x1F\x8B\x08': 'GZIP',
                b'BZh': 'BZIP2',
                b'\xFD7zXZ\x00': 'XZ',
                b'# archiver': 'ARJ',
                b'!<arch>': 'AR (Unix)',
                b'\x60\xEA': 'AR (Unix)',
                b'MSZIP': 'CAB (Microsoft)',
                b'MSCF': 'CAB (Microsoft)',
                b'-lh': 'LHA/LZH',
                b'-lz': 'LHA/LZH'
            }

            for signature, format_name in archive_signatures.items():
                if header.startswith(signature):
                    logger.info(f"üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –∞—Ä—Ö–∏–≤–∞: {format_name}")
                    return True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è TAR –∞—Ä—Ö–∏–≤–æ–≤
            if len(header) >= 512:
                if header[257:262] == b'ustar' or header[257:263] == b'ustar ':
                    logger.info("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ TAR")
                    return True

                if header[257:263] == b'ustar\x00':
                    logger.info("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ TAR (GNU)")
                    return True

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ–∞–π–ª–∞: {e}")

        logger.info(f"üìã –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—Ä—Ö–∏–≤–æ–º: {file_path.suffix}")
        return False

    def _check_archive_integrity(self, archive_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞"""
        try:
            import libarchive
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å entries
            with libarchive.file_reader(str(archive_path)) as archive:
                entry_count = 0
                for entry in archive:
                    entry_count += 1
                    if entry_count > 10:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                        break
            logger.info(f"‚úÖ –ê—Ä—Ö–∏–≤ –ø—Ä–æ—à–µ–ª –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ê—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {e}")
            return False

    def _extract_rar_with_unrar(self, archive_path: Path):
        """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç RAR –∞—Ä—Ö–∏–≤ —Å –ø–æ–º–æ—â—å—é unrar (—Å–∏—Å—Ç–µ–º–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ unrar
            unrar_path = shutil.which('unrar')
            if not unrar_path:
                unrar_path = shutil.which('unrar-free')
                if not unrar_path:
                    raise Exception("unrar –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo pacman -S unrar")

            logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É—é unrar: {unrar_path}")

            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            result = subprocess.run([
                unrar_path, 'lb', str(archive_path)
            ], capture_output=True, text=True, check=True)

            file_list = result.stdout.strip().split('\n')
            total_files = len([f for f in file_list if f.strip()])

            if total_files == 0:
                logger.warning("‚ö†Ô∏è RAR –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç")
                return

            logger.info(f"üìä –í RAR –∞—Ä—Ö–∏–≤–µ {total_files} —Ñ–∞–π–ª–æ–≤")
            self.progress_updated.emit(0, f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ RAR ({total_files} —Ñ–∞–π–ª–æ–≤)...")

            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
            result = subprocess.run([
                unrar_path, 'x', '-y', str(archive_path), str(self.download_dir)
            ], capture_output=True, text=True, check=True)

            logger.info("‚úÖ RAR —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —á–µ—Ä–µ–∑ unrar –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self.extracted_files = []
            for file_path in self.download_dir.rglob('*'):
                if file_path.is_file() and file_path != archive_path:
                    self.extracted_files.append(file_path)

        except subprocess.CalledProcessError as e:
            raise Exception(f"–û—à–∏–±–∫–∞ unrar: {e.stderr}")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ RAR: {e}")

    def _extract_with_rarfile(self, archive_path: Path):
        """–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ RAR —á–µ—Ä–µ–∑ rarfile (Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)"""
        try:
            import rarfile
            logger.info("üîÑ –ü—Ä–æ–±—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É —á–µ—Ä–µ–∑ rarfile...")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç—å –∫ unrar –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            unrar_path = shutil.which('unrar')
            if unrar_path:
                rarfile.UNRAR_TOOL = unrar_path
                logger.info(f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –∫ unrar: {unrar_path}")

            with rarfile.RarFile(str(archive_path)) as rf:
                file_list = rf.namelist()
                total_files = len(file_list)

                logger.info(f"üìä –í RAR –∞—Ä—Ö–∏–≤–µ {total_files} —Ñ–∞–π–ª–æ–≤")
                self.progress_updated.emit(0, f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ RAR ({total_files} —Ñ–∞–π–ª–æ–≤)...")

                # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
                rf.extractall(path=str(self.download_dir))

            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self.extracted_files = []
            for file_path in self.download_dir.rglob('*'):
                if file_path.is_file() and file_path != archive_path:
                    self.extracted_files.append(file_path)

            logger.info(f"‚úÖ Rarfile —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª {len(self.extracted_files)} —Ñ–∞–π–ª–æ–≤")
            return True

        except ImportError:
            logger.warning("‚ö†Ô∏è rarfile –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ rarfile: {e}")
            return False

    def _extract_with_libarchive(self, archive_path: Path):
        """–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —á–µ—Ä–µ–∑ libarchive"""
        try:
            import libarchive
            self.extracted_files = []

            logger.info(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤ {archive_path.name} —á–µ—Ä–µ–∑ libarchive...")
            self.progress_updated.emit(0, "üìä –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ...")

            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            total_files = 0
            total_size = 0
            with libarchive.file_reader(str(archive_path)) as archive:
                for entry in archive:
                    if not entry.isdir:
                        total_files += 1
                        total_size += entry.size

            if total_files == 0:
                logger.warning("‚ö†Ô∏è –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
                self.progress_updated.emit(100, "‚úÖ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
                return

            logger.info(f"üìä –í –∞—Ä—Ö–∏–≤–µ {total_files} —Ñ–∞–π–ª–æ–≤, –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {self._format_size(total_size)}")
            self.progress_updated.emit(0, f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ {total_files} —Ñ–∞–π–ª–æ–≤...")

            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
            extracted_files = 0
            extracted_size = 0
            start_time = time.time()
            self.last_update_time = start_time

            with libarchive.file_reader(str(archive_path)) as archive:
                for entry in archive:
                    if self._cancelled:
                        break

                    if entry.isdir:
                        target_dir = self.download_dir / entry.pathname
                        target_dir.mkdir(parents=True, exist_ok=True)
                        continue

                    target_file = self.download_dir / entry.pathname
                    target_file.parent.mkdir(parents=True, exist_ok=True)

                    with open(target_file, 'wb') as f:
                        for block in entry.get_blocks():
                            if self._cancelled:
                                break
                            f.write(block)
                            extracted_size += len(block)

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö
                    self.extracted_files.append(target_file)
                    extracted_files += 1

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
                    current_time = time.time()
                    if current_time - self.last_update_time >= self.update_interval:
                        progress_percent = int((extracted_size / total_size) * 100) if total_size > 0 else 0
                        remaining_size = total_size - extracted_size

                        self.progress_updated.emit(
                            progress_percent,
                            f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞: {progress_percent}% ({self._format_size(remaining_size)})"
                        )
                        self.last_update_time = current_time

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if not self._cancelled:
                logger.info(f"‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ {extracted_files} —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ libarchive")
                self.progress_updated.emit(100, f"‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ {extracted_files} —Ñ–∞–π–ª–æ–≤")

        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ libarchive: {e}")

    def _is_ps3_pkg_file(self, file_path: Path) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PS3 PKG"""
        if file_path.suffix.lower() == '.pkg':
            logger.info(f"üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω PS3 PKG —Ñ–∞–π–ª: {file_path.name}")
            return True
        return False

    def _is_ps3_iso_file(self, file_path: Path) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PS3 ISO"""
        if file_path.suffix.lower() == '.iso':
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è PS3 ISO
            try:
                with open(file_path, 'rb') as f:
                    header = f.read(16)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã PS3 ISO
                    if header.startswith(b'PS3') or b'PLAYSTATION' in header.upper():
                        logger.info(f"üéÆ –û–±–Ω–∞—Ä—É–∂–µ–Ω PS3 ISO —Ñ–∞–π–ª: {file_path.name}")
                        return True
            except:
                pass
        return False

    def _is_ps3_folder_structure(self, file_path: Path) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞–ø–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π PS3 –∏–≥—Ä—ã"""
        if file_path.is_dir():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ PS3
            ps3_files = [
                file_path / "EBOOT.BIN",
                file_path / "USRDIR" / "EBOOT.BIN",
                file_path / "PS3_GAME" / "PARAM.SFO",
                file_path / "PARAM.SFO"
            ]

            for ps3_file in ps3_files:
                if ps3_file.exists():
                    logger.info(f"üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞–ø–∫–∞ PS3 –∏–≥—Ä—ã: {file_path.name}")
                    return True
        return False

    def _get_ps3_game_type(self, file_path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø PS3 –∏–≥—Ä—ã"""
        if self._is_ps3_pkg_file(file_path):
            return 'pkg'
        elif self._is_ps3_iso_file(file_path):
            return 'iso'
        elif self._is_ps3_folder_structure(file_path):
            return 'folder'
        else:
            return 'unknown'

    def _should_extract_ps3_file(self, file_path: Path) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è PS3.
        PKG - –Ω–µ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏.
        """
        ps3_type = self._get_ps3_game_type(file_path)

        if ps3_type == 'pkg':
            logger.info(f"üö´ PS3 PKG —Ñ–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {file_path.name}")
            return False
        elif ps3_type == 'iso':
            logger.info(f"‚úÖ PS3 ISO —Ñ–∞–π–ª –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å: {file_path.name}")
            return False
        elif ps3_type == 'folder':
            logger.info(f"üìÅ –ü–∞–ø–∫–∞ PS3 –∏–≥—Ä—ã —É–∂–µ –≥–æ—Ç–æ–≤–∞: {file_path.name}")
            return False
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º
            return self._is_archive_file(file_path)

    def _extract_archive(self, archive_path: Path):
        """–£–º–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ fallback'–∞–º–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞
        if not self._check_archive_integrity(archive_path):
            logger.warning("‚ö†Ô∏è –ê—Ä—Ö–∏–≤ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ—Ç–æ–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—Ä—Ö–∏–≤–∞
        archive_ext = archive_path.suffix.lower()

        if archive_ext == '.rar':
            # –î–ª—è RAR –∞—Ä—Ö–∏–≤–æ–≤ –ø—Ä–æ–±—É–µ–º –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:
            methods = [
                self._extract_with_rarfile,    # 1. rarfile (Python)
                self._extract_rar_with_unrar,  # 2. unrar (—Å–∏—Å—Ç–µ–º–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞)
                self._extract_with_libarchive  # 3. libarchive (fallback)
            ]
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∞—Ä—Ö–∏–≤–æ–≤:
            methods = [
                self._extract_with_libarchive,  # 1. libarchive (–æ—Å–Ω–æ–≤–Ω–æ–π)
                self._extract_with_rarfile,     # 2. rarfile (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                self._extract_rar_with_unrar    # 3. unrar (fallback)
            ]

        last_error = None
        for method in methods:
            try:
                logger.info(f"üîÑ –ü—Ä–æ–±—É—é –º–µ—Ç–æ–¥: {method.__name__}")
                result = method(archive_path)
                if result is not False:  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –≤–µ—Ä–Ω—É–ª —è–≤–Ω—ã–π False
                    logger.info(f"‚úÖ –ú–µ—Ç–æ–¥ {method.__name__} —É—Å–ø–µ—à–µ–Ω")
                    return
            except Exception as e:
                last_error = e
                logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ {method.__name__} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                continue

        raise Exception(f"–í—Å–µ –º–µ—Ç–æ–¥—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")

    def _format_size(self, bytes_size):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
            if bytes_size < 1024.0:
                return f"{bytes_size:.1f}{unit}"
            bytes_size /= 1024.0
        return f"{bytes_size:.1f}–¢–ë"

    def _get_expected_filename(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã"""
        try:
            torrent_url = self.game_data.get("torrent_url", "")

            if torrent_url.startswith("magnet:"):
                import re
                match = re.search(r"dn=([^&]+)", torrent_url)
                if match:
                    return match.group(1)

            elif torrent_url:
                from urllib.parse import unquote, urlparse
                parsed_url = urlparse(torrent_url)
                filename = unquote(parsed_url.path.split("/")[-1])
                if filename:
                    return filename

            return f"{self.game_data.get('id', 'game')}.zip"

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: {e}")
            return f"{self.game_data.get('id', 'game')}.zip"

    def _get_downloaded_file(self) -> Path:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏"""
        try:
            expected_filename = self._get_expected_filename()
            logger.info(f"üîç –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª: {expected_filename}")

            files = list(self.download_dir.iterdir())
            if not files:
                logger.error("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Å—Ç–∞")
                return None

            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for file_path in files:
                if (file_path.is_file() and not file_path.name.startswith('.') and
                    file_path.name == expected_filename):
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {file_path.name}")
                    return file_path

            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            for file_path in files:
                if (file_path.is_file() and not file_path.name.startswith('.') and
                    expected_filename.split('.')[0] in file_path.name):
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π —Ñ–∞–π–ª: {file_path.name}")
                    return file_path

            # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
            for file_path in files:
                if file_path.is_file() and not file_path.name.startswith('.'):
                    logger.warning(f"‚ö†Ô∏è –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é: {file_path.name}")
                    return file_path

            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return None

    def run(self):
        if self._cancelled:
            self.progress_updated.emit(0, "‚ùå –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

        downloaded_file = self._get_downloaded_file()
        if not downloaded_file:
            self.error_occurred.emit("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª")
            return

        logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {downloaded_file.name}")

        # –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø PS3 –ò–ì–†
        if self.game_data.get('platform') == 'PS3':
            ps3_type = self._get_ps3_game_type(downloaded_file)
            logger.info(f"üéÆ –¢–∏–ø PS3 –∏–≥—Ä—ã: {ps3_type}")

            if ps3_type == 'pkg':
                message = f"üì¶ PS3 PKG —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {downloaded_file.name}"
                logger.info(message)
                self.progress_updated.emit(100, message)
                self.finished.emit()
                return
            elif ps3_type in ['iso', 'folder']:
                message = f"‚úÖ PS3 {ps3_type.upper()} –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É: {downloaded_file.name}"
                logger.info(message)
                self.progress_updated.emit(100, message)
                self.finished.emit()
                return

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
        is_archive = self._is_archive_file(downloaded_file)

        if not is_archive:
            message = f"‚úÖ –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—Ä—Ö–∏–≤–æ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å: {downloaded_file.name}"
            logger.info(message)
            self.progress_updated.emit(100, message)
            self.finished.emit()
            return

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        try:
            logger.info(f"üì¶ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É: {downloaded_file.name}")
            self.progress_updated.emit(0, f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {downloaded_file.name}")
            self._extract_archive(downloaded_file)

            if not self._cancelled:
                logger.info("‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                self.files_extracted.emit(self.extracted_files)
                self.progress_updated.emit(100, "‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                self.finished.emit()

        except Exception as e:
            if not self._cancelled:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {e}"
                logger.error(f"‚ùå {error_msg}")
                self.error_occurred.emit(error_msg)

    def cancel(self):
        self._cancelled = True
        logger.info("üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ã —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏")
