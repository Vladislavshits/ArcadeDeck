# ==============================================================================
# –§–ê–ô–õ: auto_installer.py
# ==============================================================================
import sys
import os
import time
import argparse
import json
import logging
from pathlib import Path
from typing import Optional
import shutil
import zipfile
import subprocess

from .emulator_manager import EmulatorManager
from .bios_manager import BIOSManager
from .config_manager import ConfigManager
from .game_downloader import GameDownloader
from .archive_extractor import ArchiveExtractor

logger = logging.getLogger('Installer')
LOG_DIR = os.path.join(os.getcwd(), "logs")
LOG_FILE = os.path.join(LOG_DIR, "auto_install.log")
os.makedirs(LOG_DIR, exist_ok=True)

def log(message):
    timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
    line = f"{timestamp} {message}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

class LoggingSignalHandler(logging.Handler):
    def __init__(self, signal_emitter):
        super().__init__()
        self.signal_emitter = signal_emitter

    def emit(self, record):
        message = self.format(record)
        self.signal_emitter.emit(0, message)

class AutoInstaller:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (—ç–º—É–ª—è—Ç–æ—Ä, BIOS, –∏–≥—Ä–∞, –∫–æ–Ω—Ñ–∏–≥)
    –∏ –ø–µ—Ä–µ–¥–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.
    """
    def __init__(self, game_data: dict, install_dir: Path, project_root: Path, test_mode: bool = False):
        self.game_data = game_data
        self.install_dir = install_dir
        self.project_root = project_root
        self.test_mode = test_mode
        self.emulator_manager = EmulatorManager(self.project_root, self.test_mode)
        self.bios_manager = BIOSManager(self.project_root)
        self.game_downloader = GameDownloader(self.game_data, self.install_dir)
        self.archive_extractor = ArchiveExtractor(self.game_data, self.install_dir)  # –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        self.config_manager = ConfigManager(self.project_root)
        self._should_stop = False

    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
        """
        try:
            # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
            log("üîß –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞...")
            if not self.emulator_manager.ensure_emulator(self.game_data.get('preferred_emulator')):
                log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return False

            # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ BIOS
            log("üîß –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ BIOS...")
            if not self.bios_manager.ensure_bios_for_platform(self.game_data.get('platform')):
                log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BIOS. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return False

            # –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
            log("üîß –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...")
            if not self.game_downloader.run():
                log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–≥—Ä—É. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return False

            # –≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            log("üîß –≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            if not self.archive_extractor.run():
                log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return False

            # –≠—Ç–∞–ø 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
            log("üîß –≠—Ç–∞–ø 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
            self.config_manager.apply_config(self.game_data.get('id'), self.game_data.get('platform'))

            log("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return True

        except Exception as e:
            log(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏: {e}")
            return False

    def cancel_installation(self):
        self._should_stop = True
        self.game_downloader.cancel_download()
        self.archive_extractor.cancel()  # –ù–æ–≤—ã–π –≤—ã–∑–æ–≤
        log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

    def _unpack_game(self, game_file_path: Path):
        """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ñ–∞–π–ª."""
        if self._should_stop:
            raise InterruptedError("–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        if zipfile.is_zipfile(game_file_path):
            logger.info("üîÑ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é ZIP-–∞—Ä—Ö–∏–≤...")
            with zipfile.ZipFile(game_file_path, 'r') as zip_ref:
                zip_ref.extractall(self.install_dir)
            os.remove(game_file_path)
            logger.info("‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP-–∞—Ä—Ö–∏–≤–æ–º, —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏–≥—Ä –¥–ª—è PixelDeck.")
    parser.add_argument("game_id", help="ID –∏–≥—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ registry_games.json")
    parser.add_argument("project_root", help="–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    parser.add_argument("--test-mode", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)")

    args = parser.parse_args()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    registry_path = Path(args.project_root) / 'app' / 'registry' / 'registry_games.json'
    game_data = None
    if registry_path.exists():
        with open(registry_path, 'r', encoding='utf-8') as f:
            registry = json.load(f)
            for game in registry:
                if game['id'] == args.game_id:
                    game_data = game
                    break

    if not game_data:
        print(f"–û—à–∏–±–∫–∞: –ò–≥—Ä–∞ —Å ID '{args.game_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ.")
        sys.exit(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    install_dir = Path(args.project_root) / 'users' / 'games' / game_data.get('platform') / game_data.get('id')
    install_dir.mkdir(parents=True, exist_ok=True)

    installer = AutoInstaller(game_data, install_dir, Path(args.project_root), args.test_mode)
    if installer.run():
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.")
