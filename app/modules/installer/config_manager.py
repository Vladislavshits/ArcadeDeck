#!/usr/bin/env python3
import shutil
import configparser
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Callable


class ConfigManager:
    def __init__(self, project_root: Path, logs_callback=None, test_mode=False):
        self.project_root = project_root
        self.logs_callback = logs_callback or (lambda msg: print(msg))
        self.test_mode = test_mode
        self._cancelled = False

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        self.SUPPORTED_FORMATS = {
            'ini': self._handle_ini_config,
            'json': self._handle_json_config,
            'cfg': self._handle_cfg_config,
            'conf': self._handle_conf_config
        }

        # –ö–∞—Ä—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
        self.EMULATOR_FORMATS = {
            # Sony
            'duckstation': {'format': 'ini', 'main_file': 'settings.ini', 'game_specific': True},
            'pcsx2': {'format': 'ini', 'main_file': 'PCSX2.ini', 'game_specific': False},
            'ppsspp': {'format': 'ini', 'main_file': 'ppsspp.ini', 'game_specific': True},
            'retroarch': {'format': 'cfg', 'main_file': 'retroarch.cfg', 'game_specific': False},

            # Nintendo
            'yuzu': {'format': 'ini', 'main_file': 'qt-config.ini', 'game_specific': True},
            'ryujinx': {'format': 'json', 'main_file': 'settings.json', 'game_specific': True},
            'dolphin': {'format': 'ini', 'main_file': 'Dolphin.ini', 'game_specific': True},
            'citra': {'format': 'ini', 'main_file': 'qt-config.ini', 'game_specific': True},

            # Sega
            'flycast': {'format': 'ini', 'main_file': 'emu.cfg', 'game_specific': False},

            # Default
            'default': {'format': 'ini', 'main_file': 'settings.ini', 'game_specific': False}
        }

    def _log(self, message: str):
        ts = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
        line = f"{ts} [ConfigManager] {message}"
        self.logs_callback(line)

    def _get_emulator_config(self, emulator_name: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        return self.EMULATOR_FORMATS.get(emulator_name, self.EMULATOR_FORMATS['default'])

    def _handle_ini_config(self, source_path: Path, target_path: Path, game_id: str = None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ INI –∫–æ–Ω—Ñ–∏–≥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π game-specific –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            if not self.test_mode:
                # –î–ª—è INI —Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å game-specific —Å–µ–∫—Ü–∏–∏
                if game_id and source_path.exists():
                    config = configparser.ConfigParser()
                    config.read(source_path)

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    game_section = f"GameSettings_{game_id}"
                    if not config.has_section(game_section):
                        config.add_section(game_section)
                        config.set(game_section, 'GameID', game_id)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
                    with open(target_path, 'w') as f:
                        config.write(f)
                    self._log(f"‚úÖ INI –∫–æ–Ω—Ñ–∏–≥ –æ–±–æ–≥–∞—â–µ–Ω game-specific –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {target_path.name}")
                else:
                    # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    shutil.copy(source_path, target_path)
                    self._log(f"‚úÖ INI –∫–æ–Ω—Ñ–∏–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source_path.name}")
            else:
                self._log(f"[TEST MODE] –û–±—Ä–∞–±–æ—Ç–∫–∞ INI: {source_path.name} -> {target_path.name}")

        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ INI –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            if not self.test_mode and source_path.exists():
                shutil.copy(source_path, target_path)  # Fallback

    def _handle_json_config(self, source_path: Path, target_path: Path, game_id: str = None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ JSON –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
        try:
            if not self.test_mode:
                if game_id and source_path.exists():
                    # –î–ª—è JSON –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å game-specific –ø–æ–ª—è
                    with open(source_path, 'r', encoding='utf-8') as f:
                        config_data = json.load(f)

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã
                    if 'game_specific' not in config_data:
                        config_data['game_specific'] = {}
                    config_data['game_specific'][game_id] = {
                        'game_id': game_id,
                        'configured': True
                    }

                    with open(target_path, 'w', encoding='utf-8') as f:
                        json.dump(config_data, f, indent=2, ensure_ascii=False)
                    self._log(f"‚úÖ JSON –∫–æ–Ω—Ñ–∏–≥ –æ–±–æ–≥–∞—â–µ–Ω game-specific –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {target_path.name}")
                else:
                    shutil.copy(source_path, target_path)
                    self._log(f"‚úÖ JSON –∫–æ–Ω—Ñ–∏–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source_path.name}")
            else:
                self._log(f"[TEST MODE] –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON: {source_path.name} -> {target_path.name}")

        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            if not self.test_mode and source_path.exists():
                shutil.copy(source_path, target_path)  # Fallback

    def _handle_cfg_config(self, source_path: Path, target_path: Path, game_id: str = None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ CFG –∫–æ–Ω—Ñ–∏–≥–æ–≤ (RetroArch)"""
        if not self.test_mode:
            shutil.copy(source_path, target_path)
            self._log(f"‚úÖ CFG –∫–æ–Ω—Ñ–∏–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source_path.name}")
        else:
            self._log(f"[TEST MODE] –û–±—Ä–∞–±–æ—Ç–∫–∞ CFG: {source_path.name} -> {target_path.name}")

    def _handle_conf_config(self, source_path: Path, target_path: Path, game_id: str = None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ CONF –∫–æ–Ω—Ñ–∏–≥–æ–≤ (DOSBox)"""
        if not self.test_mode:
            shutil.copy(source_path, target_path)
            self._log(f"‚úÖ CONF –∫–æ–Ω—Ñ–∏–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source_path.name}")
        else:
            self._log(f"[TEST MODE] –û–±—Ä–∞–±–æ—Ç–∫–∞ CONF: {source_path.name} -> {target_path.name}")

    def apply_config(self, game_id: str, platform: str, emulator_name: str) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–≥—Ä—ã
        –¢–µ–ø–µ—Ä—å –∫–æ–ø–∏—Ä—É–µ—Ç –í–°–Æ –ø–∞–ø–∫—É —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏!
        """
        if self._cancelled:
            return False

        self._log(f"üéØ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è {game_id} ({platform}) —ç–º—É–ª—è—Ç–æ—Ä: {emulator_name}")

        platform_dir = self.project_root / 'app' / 'emulators' / platform
        target_dir = self.project_root / 'users' / 'configs' / platform

        # –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø PCSX2
        if emulator_name.lower() == 'pcsx2':
            emulator_folders = [
                # 1. –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ø–∫–∞ PCSX2 —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏
                platform_dir / 'PCSX2',
                # 2. –ü–∞–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º —ç–º—É–ª—è—Ç–æ—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                platform_dir / emulator_name,
                # 3. –ü–∞–ø–∫–∞ games/—ç–º—É–ª—è—Ç–æ—Ä
                platform_dir / 'games' / emulator_name,
                # 4. –ü–∞–ø–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                platform_dir / 'preset_default'
            ]
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
            emulator_folders = [
                platform_dir / emulator_name,
                platform_dir / 'games' / emulator_name,
                platform_dir / 'preset_default'
            ]

        for source_folder in emulator_folders:
            if source_folder.exists() and source_folder.is_dir():
                # –°–û–•–†–ê–ù–Ø–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –ò–ú–Ø –ü–ê–ü–ö–ò, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º emulator_name
                target_emulator_folder = target_dir / source_folder.name

                self._log(f"üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞: {source_folder}")

                # –ö–æ–ø–∏—Ä—É–µ–º –í–°–Æ –ø–∞–ø–∫—É —ç–º—É–ª—è—Ç–æ—Ä–∞
                if not self.test_mode:
                    target_emulator_folder.mkdir(parents=True, exist_ok=True)

                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
                    for item in source_folder.iterdir():
                        target_item = target_emulator_folder / item.name
                        if item.is_dir():
                            shutil.copytree(item, target_item, dirs_exist_ok=True)
                        else:
                            shutil.copy2(item, target_item)

                    self._log(f"‚úÖ –ü–∞–ø–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {target_emulator_folder}")
                else:
                    self._log(f"[TEST MODE] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {source_folder} -> {target_emulator_folder}")

                return True

        # Fallback: —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏
        return self._apply_legacy_config(game_id, platform, emulator_name)

    def _apply_legacy_config(self, game_id: str, platform: str, emulator_name: str) -> bool:
        """–°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        emulator_config = self._get_emulator_config(emulator_name)
        config_format = emulator_config['format']

        platform_dir = self.project_root / 'app' / 'emulators' / platform
        target_dir = self.project_root / 'users' / 'configs' / platform

        # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
        config_sources = [
            (platform_dir / 'games' / f"{game_id}.{config_format}", f"{game_id}.{config_format}"),
            (platform_dir / f"preset_default.{config_format}", f"{game_id}.{config_format}"),
        ]

        for source_path, target_filename in config_sources:
            if source_path.exists():
                target_path = target_dir / target_filename
                self._log(f"üìÑ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥: {source_path}")

                if not self.test_mode:
                    target_path.parent.mkdir(parents=True, exist_ok=True)
                    shutil.copy2(source_path, target_path)
                    self._log(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {target_path}")
                else:
                    self._log(f"[TEST MODE] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞: {source_path} -> {target_path}")

                return True

        self._log(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è {platform}/{game_id}")
        return False

    def _apply_single_config(self, source_path: Path, target_path: Path,
                           config_format: str, game_id: str = None) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–∞"""
        if self._cancelled:
            return False

        handler = self.SUPPORTED_FORMATS.get(config_format)
        if not handler:
            self._log(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥–∞: {config_format}")
            return False

        if not self.test_mode:
            target_path.parent.mkdir(parents=True, exist_ok=True)

        try:
            handler(source_path, target_path, game_id)
            return True
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ {source_path}: {e}")
            return False

    def cancel(self):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self._cancelled = True
