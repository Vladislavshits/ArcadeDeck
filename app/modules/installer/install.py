import sys
import json
import logging
import time
from pathlib import Path
from PyQt6.QtWidgets import (QApplication, QDialog, QVBoxLayout, QLabel,
                           QProgressBar, QPushButton, QHBoxLayout, QMessageBox,
                           QTextEdit)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QTimer

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
from .emulator_manager import EmulatorManager
from .bios_manager import BIOSManager
from .config_manager import ConfigManager
from .game_downloader import GameDownloader
from .archive_extractor import ArchiveExtractor
from .launch_manager import LaunchManager

# –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
from core import get_users_path
from core import get_users_subpath

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger = logging.getLogger('PixelDeck')


class InstallThread(QThread):

    finished = pyqtSignal()

    progress_updated = pyqtSignal(int, str)
    finished = pyqtSignal(dict)
    error_occurred = pyqtSignal(str)
    cancelled = pyqtSignal()
    set_indeterminate = pyqtSignal(bool)

    def __init__(self, game_data: dict, install_dir: Path, project_root: Path, parent=None):
        super().__init__(parent)
        self.game_data = game_data
        self.install_dir = install_dir
        self.project_root = project_root
        self._cancelled = False
        self._was_cancelled = False
        self.installed_games_file = Path(get_users_path()) / 'installed_games.json'

        self.emulator_manager = EmulatorManager(self.project_root, test_mode=False)
        self.bios_manager = BIOSManager(self.project_root)
        self.game_downloader = GameDownloader(self.game_data, self.install_dir)
        self.archive_extractor = ArchiveExtractor(self.game_data, self.install_dir)
        self.extracted_files = []
        self.config_manager = ConfigManager(self.project_root)
        self.launch_manager = LaunchManager(self.project_root)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä LaunchManager

    def get_installed_games(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
        if self.installed_games_file.exists():
            try:
                with open(self.installed_games_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return {}
        return {}

    def run(self):
        try:
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞
            self.progress_updated.emit(5, "–≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞...")
            if self._cancelled:
                self._was_cancelled = True
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ensure_emulator_for_game
            if not self.emulator_manager.ensure_emulator_for_game(self.game_data):
                self.error_occurred.emit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —ç–º—É–ª—è—Ç–æ—Ä–∞.")
                return

            if self._cancelled:
                self._was_cancelled = True
                return

            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ BIOS
            self.progress_updated.emit(30, "–≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ BIOS...")
            if self._cancelled:
                self._was_cancelled = True
                return

            if not self.bios_manager.ensure_bios_for_platform(self.game_data.get('platform')):
                self.error_occurred.emit("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ BIOS.")
                return

            if self._cancelled:
                self._was_cancelled = True
                return

            # –®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
            self.progress_updated.emit(50, "–≠—Ç–∞–ø 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã...")
            self.set_indeterminate.emit(True)

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã game_downloader
            self.game_downloader.progress_updated.connect(self.progress_updated)
            self.game_downloader.finished.connect(self.on_download_finished)
            self.game_downloader.error_occurred.connect(self.on_download_error)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.game_downloader.start()

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            while self.game_downloader.isRunning() and not self._cancelled:
                self.msleep(100)

            if self._cancelled:
                self.game_downloader.cancel()
                self.game_downloader.wait()
                self._was_cancelled = True
                return

            # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.game_downloader.progress_updated.disconnect(self.progress_updated)
            self.game_downloader.finished.disconnect(self.on_download_finished)
            self.game_downloader.error_occurred.disconnect(self.on_download_error)

            if self._cancelled:
                self._was_cancelled = True
                return

            # –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            self.set_indeterminate.emit(False)
            self.progress_updated.emit(75, "–≠—Ç–∞–ø 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            if self._cancelled:
                self._was_cancelled = True
                return

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã archive_extractor
            self.archive_extractor.progress_updated.connect(self.progress_updated)
            self.archive_extractor.finished.connect(self.on_extraction_finished)
            self.archive_extractor.error_occurred.connect(self.on_extraction_error)
            self.archive_extractor.files_extracted.connect(self.on_files_extracted)  # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤
            self.archive_extractor.start()

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            while self.archive_extractor.isRunning() and not self._cancelled:
                self.msleep(100)

            if self._cancelled:
                self.archive_extractor.cancel()
                self.archive_extractor.wait()
                self._was_cancelled = True
                return

            # –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.archive_extractor.progress_updated.disconnect(self.progress_updated)
            self.archive_extractor.finished.disconnect(self.on_extraction_finished)
            self.archive_extractor.error_occurred.disconnect(self.on_extraction_error)
            self.archive_extractor.files_extracted.disconnect(self.on_files_extracted)

            if self._cancelled:
                self._was_cancelled = True
                return

            # –®–∞–≥ 5: –ö–æ–Ω—Ñ–∏–≥–∏
            self.progress_updated.emit(85, "–≠—Ç–∞–ø 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
            if self._cancelled:
                self._was_cancelled = True
                return

            self.config_manager.apply_config(
                self.game_data.get('id'),
                self.game_data.get('platform')
            )

            if self._cancelled:
                self._was_cancelled = True
                return

            # –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ –ª–∞—É–Ω—á–µ—Ä–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä—ã —á–µ—Ä–µ–∑ LaunchManager
            self.progress_updated.emit(90, "–≠—Ç–∞–ø 6: –°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")
            if self._cancelled:
                self._was_cancelled = True
                return

            # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –∏–≥—Ä—ã
            game_file = self.find_game_file()

            if game_file and game_file.is_file():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º LaunchManager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞
                try:
                    success = self.launch_manager.create_launcher(self.game_data, game_file)

                    if success:
                        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –ª–∞—É–Ω—á–µ—Ä—É
                        launcher_path = self.launch_manager.scripts_dir / f"{self.game_data.get('id')}.sh"

                        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                        logger.info(f"üîç –ü–æ–∏—Å–∫ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –∏–≥—Ä—ã {self.game_data.get('id')}")
                        cover_path = self.launch_manager._get_cover_path(self.game_data)
                        logger.info(f"üìÅ –ü—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ: {cover_path}")

                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä—É
                        installed_games = self.get_installed_games()
                        game_info = {
                            'title': self.game_data.get('title'),
                            'platform': self.game_data.get('platform'),
                            'install_path': str(game_file.absolute()),
                            'launcher_path': str(launcher_path.absolute()),
                            'install_date': time.time(),
                            'cover_path': cover_path  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ
                        }

                        installed_games[self.game_data.get('id')] = game_info
                        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ: {game_info}")

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–µ—Å—Ç—Ä
                        with open(self.installed_games_file, 'w', encoding='utf-8') as f:
                            json.dump(installed_games, f, ensure_ascii=False, indent=2)

                        logger.info(f"‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ installed_games.json")

                        self.progress_updated.emit(95, "‚úÖ –õ–∞—É–Ω—á–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –∏–≥—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
                        self.finished.emit(self.game_data)
                    else:
                        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∞—É–Ω—á–µ—Ä–∞
                        error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –∏–≥—Ä—ã"
                        logger.error(f"‚ùå {error_msg}")
                        self.progress_updated.emit(90, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —è—Ä–ª—ã–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
                        self.error_occurred.emit(error_msg)
                        return

                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∞—É–Ω—á–µ—Ä–∞: {e}"
                    logger.error(f"‚ùå {error_msg}")
                    self.progress_updated.emit(90, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è—Ä–ª—ã–∫–∞")
                    self.error_occurred.emit(error_msg)
                    return
            else:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –∏–≥—Ä—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
                logger.error(f"‚ùå {error_msg}")
                self.progress_updated.emit(90, "‚ùå –§–∞–π–ª –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.error_occurred.emit(error_msg)
                return

        except Exception as e:
            if not self._was_cancelled:
                self.error_occurred.emit(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
        finally:
            self.set_indeterminate.emit(False)
            if self._was_cancelled:
                self.cancelled.emit()

    def on_files_extracted(self, files_list):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        self.extracted_files = files_list
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {[f.name for f in files_list]}")

    def find_game_file(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª –∏–≥—Ä—ã –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        try:
            platform_id = self.game_data.get('platform')
            logger.info(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∏–≥—Ä—ã –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platform_id}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            platform_config_path = self.project_root / 'app' / 'registry' / 'platforms' / platform_id / 'config.py'

            supported_formats = []
            if platform_config_path.exists():
                try:
                    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                    import importlib.util
                    spec = importlib.util.spec_from_file_location(f"{platform_id}_config", platform_config_path)
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)

                    if hasattr(module, 'get_config'):
                        config = module.get_config()
                        supported_formats = config.get('supported_formats', [])
                        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {supported_formats}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {e}")

            # Fallback: –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            if not supported_formats:
                platform_formats = {
                    "PSP": [".iso", ".cso", ".pbp", ".elf"],
                    "ppsspp": [".iso", ".cso", ".pbp", ".elf"],
                    "PS1": [".bin", ".cue", ".img", ".mdf", ".pbp"],
                    "duckstation": [".bin", ".cue", ".img", ".mdf", ".pbp"],
                    "PS2": [".iso", ".bin", ".mdf", ".gz"],
                    "pcsx2": [".iso", ".bin", ".mdf", ".gz"],
                    "GBA": [".gba", ".agb", ".bin"],
                    "NDS": [".nds", ".srl", ".bin"],
                    "N64": [".n64", ".v64", ".z64", ".bin"],
                    "SNES": [".smc", ".sfc", ".fig", ".swc"],
                    "NES": [".nes", ".fds", ".unf", ".unif"]
                }
                supported_formats = platform_formats.get(platform_id, [".iso", ".bin", ".img"])
                logger.warning(f"‚ö†Ô∏è –î–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã {platform_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã supported_formats, –∏—Å–ø–æ–ª—å–∑—É—é fallback: {supported_formats}")

            logger.info(f"üîç –§–æ—Ä–º–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: {supported_formats}")

            # –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
            game_id = self.game_data.get('id', '').lower()
            logger.info(f"üîç –ò—â–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∏–≥—Ä—ã ID: {game_id}")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if self.extracted_files:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
                for file_path in self.extracted_files:
                    if (file_path.is_file() and
                        file_path.suffix.lower() in supported_formats):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path.name}")
                        return file_path

            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π, –∏—â–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            game_files = []
            for file_path in self.install_dir.iterdir():
                if (file_path.is_file() and
                    file_path.suffix.lower() in supported_formats):

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ ID –∏–≥—Ä—ã
                    filename_lower = file_path.name.lower()
                    if game_id in filename_lower or any(
                        word in filename_lower for word in game_id.split('_')
                    ):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {file_path.name}")
                        game_files.append(file_path)
                    else:
                        logger.info(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ID –∏–≥—Ä—ã: {file_path.name}")

            if game_files:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª (–ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–ª–∏ —Ç–æ—á–Ω–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é)
                result = max(game_files, key=lambda f: f.stat().st_size)
                logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∏–≥—Ä—ã: {result.name}")
                return result

            # Fallback: –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é, –∏—â–µ–º –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
            all_files = [f for f in self.install_dir.iterdir()
                        if f.is_file() and f.suffix.lower() in supported_formats]

            if all_files:
                result = max(all_files, key=lambda f: f.stat().st_size)
                logger.warning(f"‚ö†Ô∏è –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é: {result.name}")
                return result

            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞ –∏–≥—Ä—ã: {e}")
            return None

    def on_download_finished(self):
        self.progress_updated.emit(70, "‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def on_download_error(self, error_msg):
        self.error_occurred.emit(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg}")

    def on_extraction_finished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        self.progress_updated.emit(80, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def on_extraction_error(self, error_msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        self.error_occurred.emit(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {error_msg}")

    def cancel(self):
        self._cancelled = True
        self._was_cancelled = True
        self.game_downloader.cancel()
        self.archive_extractor.cancel()
        self.emulator_manager.cancel()
        self.bios_manager.cancel()
        self.config_manager.cancel()


class InstallDialog(QDialog):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
    """

    installation_finished = pyqtSignal()

    def __init__(self, game_data: dict, project_root: Path, parent=None):
        super().__init__(parent)
        self.game_data = game_data
        self.project_root = project_root
        self.dialog_is_finished = False
        self.installation_cancelled = False

        self.install_dir = Path(get_users_subpath("games")) / self.game_data.get('platform')
        self.install_dir.mkdir(parents=True, exist_ok=True)

        self.thread = None
        self.animation_timer = QTimer()
        self.animation_timer.timeout.connect(self.update_animation)
        self.animation_value = 0
        self.is_indeterminate = False
        
        self.init_ui()
        self.start_installation()

    def init_ui(self):
        self.setWindowTitle("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã")
        self.setFixedWidth(650)

        layout = QVBoxLayout()

        self.title_label = QLabel(f"<b>{self.game_data.get('title')}</b>", self)
        self.title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.title_label)

        self.status_label = QLabel("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ...", self)
        layout.addWidget(self.status_label)

        self.progress_bar = QProgressBar(self)
        self.progress_bar.setValue(0)
        layout.addWidget(self.progress_bar)

        self.log_output = QTextEdit(self)
        self.log_output.setReadOnly(True)
        # –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥-–æ–∫–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.log_output.hide()
        layout.addWidget(self.log_output)

        button_layout = QHBoxLayout()
        # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –ª–æ–≥–æ–≤
        self.show_log_button = QPushButton("–õ–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", self)
        self.show_log_button.clicked.connect(self.toggle_log_visibility)
        button_layout.addWidget(self.show_log_button)

        self.cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞", self)
        self.cancel_button.clicked.connect(self.on_cancel_button_clicked)
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)

        self.setLayout(layout)

    def start_installation(self):
        self.thread = InstallThread(self.game_data, self.install_dir, self.project_root)
        self.thread.progress_updated.connect(self.update_progress)
        self.thread.error_occurred.connect(self.handle_error)
        self.thread.finished.connect(self.on_thread_finished)
        self.thread.cancelled.connect(self.on_thread_cancelled)
        self.thread.set_indeterminate.connect(self.set_progress_indeterminate)
        self.thread.start()

    def update_progress(self, percentage: int, message: str):
        if not self.is_indeterminate:
            self.progress_bar.setValue(percentage)
        self.status_label.setText(message)
        self.log_output.append(message)

    def set_progress_indeterminate(self, indeterminate: bool):
        self.is_indeterminate = indeterminate
        if indeterminate:
            self.animation_timer.start(50)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 50–º—Å
        else:
            self.animation_timer.stop()
            self.progress_bar.setValue(self.progress_bar.value())

    def update_animation(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è "–ø—É–ª—å—Å–∞—Ü–∏–∏" –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.animation_value = (self.animation_value + 2) % 100
        self.progress_bar.setValue(self.animation_value)

    def handle_error(self, message: str):
        self.status_label.setText("–û—à–∏–±–∫–∞: " + message)
        self.log_output.append("–û–®–ò–ë–ö–ê: " + message)
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", message)
        self.cancel_button.setEnabled(False)
        self.show_log_button.setEnabled(False)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É —É–≤–∏–¥–µ–ª –¥–µ—Ç–∞–ª–∏
        self.log_output.show()

    def toggle_log_visibility(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –ª–æ–≥–æ–≤ –∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞.
        """
        if self.log_output.isVisible():
            self.log_output.hide()
            self.show_log_button.setText("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥")
        else:
            self.log_output.show()
            self.show_log_button.setText("–°–∫—Ä—ã—Ç—å –ª–æ–≥")
        self.adjustSize()

    def on_thread_finished(self, game_data):
        if self.installation_cancelled:
            self.progress_bar.setValue(0)
            self.status_label.setText("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
        else:
            self.progress_bar.setValue(100)
            self.status_label.setText("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
            if hasattr(self.parent(), 'game_library'):
                self.parent().game_library.load_games()

            self.installation_finished.emit()

        # –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –Ω–∞ "–ó–∞–∫—Ä—ã—Ç—å"
        self.cancel_button.setText("–ó–∞–∫—Ä—ã—Ç—å")
        self.cancel_button.setEnabled(True)
        self.dialog_is_finished = True
        self.animation_timer.stop()

    def on_thread_cancelled(self):
        self.installation_cancelled = True
        self.status_label.setText("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
        self.log_output.append("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        self.cancel_button.setText("–ó–∞–∫—Ä—ã—Ç—å")
        self.cancel_button.setEnabled(True)
        self.dialog_is_finished = True
        self.animation_timer.stop()

    def on_cancel_button_clicked(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        if self.dialog_is_finished:
            # –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            self.accept()
            return

        reply = QMessageBox.question(self, "–û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É?",
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                     QMessageBox.StandardButton.No)
        if reply == QMessageBox.StandardButton.Yes:
            self.cancel_installation()

    def cancel_installation(self):
        self.installation_cancelled = True
        self.status_label.setText("–û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        if self.thread and self.thread.isRunning():
            self.thread.cancel()
        self.cancel_button.setEnabled(False)
        self.show_log_button.setEnabled(False)
        self.log_output.append("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        self.animation_timer.stop()

    def closeEvent(self, event):
        if self.thread and self.thread.isRunning():
            reply = QMessageBox.question(self, "–û—Ç–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë?",
                                         QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            if reply == QMessageBox.StandardButton.Yes:
                self.cancel_installation()
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python install.py <game_data.json> <project_root>")
        sys.exit(1)

    try:
        with open(sys.argv[1], 'r') as f:
            game_data = json.load(f)
        app = QApplication(sys.argv)
        dialog = InstallDialog(game_data, Path(sys.argv[2]))
        dialog.exec()
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {e}")
        sys.exit(1)
