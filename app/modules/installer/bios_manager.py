# bios_manager.py
#!/usr/bin/env python3
import json
import logging
import shutil
import zipfile
from pathlib import Path
from urllib.parse import unquote, urlparse
from PyQt6.QtCore import QThread, pyqtSignal
import requests

logger = logging.getLogger('BIOSManager')


class YandexDownloader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""

    @staticmethod
    def download_file(url: str, target_path: Path, progress_callback=None) -> bool:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
        try:
            logger.info("üéØ –ó–∞–≥—Ä—É–∑–∫–∞ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º public key –∏–∑ URL
            if '/d/' in url:
                public_key = url.split('/d/')[1].split('/')[0].split('?')[0]
            else:
                public_key = url.split('/')[-1]

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å API
            api_url = f"https://cloud-api.yandex.net/v1/disk/public/resources/download?public_key=https://disk.yandex.ru/d/{public_key}"

            response = requests.get(api_url)
            if response.status_code != 200:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
                return False

            data = response.json()
            download_url = data.get('href')
            if not download_url:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                return False

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            return YandexDownloader._download_direct(download_url, target_path, progress_callback)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞: {e}")
            return False

    @staticmethod
    def _download_direct(url: str, target_path: Path, progress_callback=None) -> bool:
        """–ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
                'Accept': '*/*'
            }

            response = requests.get(url, stream=True, headers=headers, timeout=30)
            response.raise_for_status()

            total_size = int(response.headers.get('content-length', 0))
            downloaded_size = 0

            with open(target_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        downloaded_size += len(chunk)

                        if progress_callback and total_size > 0:
                            progress = int((downloaded_size / total_size) * 100)
                            mb_downloaded = downloaded_size / (1024 * 1024)
                            progress_callback(progress, f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤: {mb_downloaded:.1f}MB")

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞: {target_path.name}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False


class BIOSDownloadThread(QThread):
    progress_updated = pyqtSignal(int, str)
    finished = pyqtSignal(bool, str)
    error_occurred = pyqtSignal(str)

    def __init__(self, bios_info: dict, target_dir: Path, platform: str):
        super().__init__()
        self.bios_info = bios_info
        self.target_dir = target_dir
        self.platform = platform
        self._cancelled = False

    def run(self):
        try:
            download_url = self.bios_info.get('bios_url')
            if not download_url:
                self.error_occurred.emit("URL –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω")
                return

            self.progress_updated.emit(0, "üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...")

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            temp_dir = self.target_dir / "temp_download"
            temp_dir.mkdir(parents=True, exist_ok=True)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .zip
            filename = self._generate_filename(download_url)
            temp_file = temp_dir / filename

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            self.progress_updated.emit(10, "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞...")

            success = YandexDownloader.download_file(
                download_url,
                temp_file,
                progress_callback=self.progress_updated.emit
            )

            if not success:
                self.error_occurred.emit("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤")
                return

            if self._cancelled:
                self.progress_updated.emit(0, "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return

            # –í–°–ï–ì–î–ê –ü–´–¢–ê–ï–ú–°–Ø –†–ê–°–ü–ê–ö–û–í–ê–¢–¨ –ö–ê–ö –ê–†–•–ò–í
            self.progress_updated.emit(90, "üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∞—Ä—Ö–∏–≤–∞ –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º —Ñ–∞–π–ª–æ–≤
            if self._is_archive_by_signature(temp_file) or self._is_archive_by_extension(temp_file):
                logger.info(f"üîß –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –∞—Ä—Ö–∏–≤: {temp_file.name}")
                extracted_files = self._extract_archive(temp_file, self.target_dir)

                # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
                temp_file.unlink()
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–∏–ª –∞—Ä—Ö–∏–≤: {temp_file.name}")

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
                if extracted_files:
                    logger.info(f"‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ {len(extracted_files)} —Ñ–∞–π–ª–æ–≤")
                    for file in extracted_files:
                        logger.info(f"üìÑ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {file.name}")
                else:
                    logger.warning("‚ö†Ô∏è –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω, –Ω–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å, –ø—Ä–æ–±—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞—Ä—Ö–∏–≤–æ–º, –ø—Ä–æ–±—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å: {temp_file.name}")
                try:
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                    shutil.copy2(temp_file, self.target_dir / temp_file.name)
                    logger.info(f"üìÑ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: {temp_file.name}")
                except Exception as copy_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {copy_error}")

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            shutil.rmtree(temp_dir)

            # –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ê–ï–ú–°–Ø –ë–ï–ó –ü–†–û–í–ï–†–ö–ò –§–ê–ô–õ–û–í
            self.progress_updated.emit(100, "‚úÖ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã!")
            self.finished.emit(True, f"–§–∞–π–ª—ã –¥–ª—è {self.platform} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"
            logger.error(f"‚ùå {error_msg}")
            self.error_occurred.emit(error_msg)

    def _generate_filename(self, url: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .zip"""
        parsed = urlparse(url)
        filename = unquote(parsed.path.split('/')[-1])

        if not filename or filename == '/':
            import time
            filename = f"download_{int(time.time())}.zip"
        elif not any(filename.lower().endswith(ext) for ext in ['.zip', '.7z', '.rar', '.tar.gz', '.tar']):
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º .zip
            filename += ".zip"

        return filename

    def _is_archive_by_extension(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        archive_extensions = ['.zip', '.7z', '.rar', '.tar.gz', '.tar']
        return file_path.suffix.lower() in archive_extensions

    def _is_archive_by_signature(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º —Ñ–∞–π–ª–æ–≤"""
        try:
            with open(file_path, 'rb') as f:
                header = f.read(8)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –±–∞–π—Ç

            # ZIP signature
            if header.startswith(b'PK\x03\x04'):
                return True
            # 7z signature
            elif header.startswith(b'7z\xBC\xAF\x27\x1C'):
                return True
            # RAR signature
            elif header.startswith(b'Rar!\x1A\x07\x00'):
                return True
            # GZIP signature (for .tar.gz)
            elif header.startswith(b'\x1F\x8B'):
                return True
            # TAR signature
            elif header.startswith(b'ustar') or header[257:262] == b'ustar':
                return True

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ–∞–π–ª–∞: {e}")

        return False

    def _extract_archive(self, archive_path: Path, extract_to: Path) -> list:
        """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        extracted_files = []

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ
            if self._is_zip_by_signature(archive_path):
                logger.info(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é ZIP –∞—Ä—Ö–∏–≤ (–ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ): {archive_path.name}")
                return self._extract_zip(archive_path, extract_to)
            elif self._is_archive_by_extension(archive_path):
                file_ext = archive_path.suffix.lower()
                if file_ext == '.zip':
                    logger.info(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é ZIP –∞—Ä—Ö–∏–≤: {archive_path.name}")
                    return self._extract_zip(archive_path, extract_to)
                elif file_ext in ['.7z', '.rar']:
                    logger.info(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é {file_ext} –∞—Ä—Ö–∏–≤: {archive_path.name}")
                    return self._extract_with_libarchive(archive_path, extract_to)
                elif file_ext in ['.tar.gz', '.tar']:
                    logger.info(f"üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é TAR –∞—Ä—Ö–∏–≤: {archive_path.name}")
                    return self._extract_tar(archive_path, extract_to)
            else:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∫–∞–∫ ZIP (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
                logger.info(f"üì¶ –ü—Ä–æ–±—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∫–∞–∫ ZIP: {archive_path.name}")
                return self._extract_zip(archive_path, extract_to)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {e}")

        return extracted_files

    def _is_zip_by_signature(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª ZIP –∞—Ä—Ö–∏–≤–æ–º –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ"""
        try:
            with open(file_path, 'rb') as f:
                return f.read(4) == b'PK\x03\x04'
        except:
            return False

    def _extract_zip(self, archive_path: Path, extract_to: Path) -> list:
        """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤"""
        extracted_files = []
        try:
            with zipfile.ZipFile(archive_path, 'r') as zip_ref:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ
                file_list = zip_ref.namelist()
                logger.info(f"üìã –§–∞–π–ª—ã –≤ ZIP –∞—Ä—Ö–∏–≤–µ: {file_list}")

                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
                zip_ref.extractall(extract_to)

                # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                for file_name in file_list:
                    extracted_file = extract_to / file_name
                    if extracted_file.exists():
                        extracted_files.append(extracted_file)

            logger.info(f"‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {archive_path.name}")
        except zipfile.BadZipFile:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP –∞—Ä—Ö–∏–≤–æ–º: {archive_path.name}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ ZIP: {e}")
            raise

        return extracted_files

    def _extract_with_libarchive(self, archive_path: Path, extract_to: Path) -> list:
        """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç 7z/RAR –∞—Ä—Ö–∏–≤ —Å –ø–æ–º–æ—â—å—é libarchive"""
        extracted_files = []
        try:
            import libarchive
            with libarchive.file_reader(str(archive_path)) as archive:
                for entry in archive:
                    if not entry.isdir:
                        target_path = extract_to / entry.pathname
                        target_path.parent.mkdir(parents=True, exist_ok=True)
                        with open(target_path, 'wb') as f:
                            for block in entry.get_blocks():
                                f.write(block)
                        extracted_files.append(target_path)
                        logger.info(f"üìÑ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {entry.pathname}")

            logger.info(f"‚úÖ {archive_path.suffix.upper()} –∞—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {archive_path.name}")
        except ImportError:
            logger.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ libarchive –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            raise Exception("–î–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ 7z/RAR –∞—Ä—Ö–∏–≤–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è libarchive")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ {archive_path.suffix}: {e}")
            raise

        return extracted_files

    def _extract_tar(self, archive_path: Path, extract_to: Path) -> list:
        """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç TAR/TAR.GZ –∞—Ä—Ö–∏–≤"""
        extracted_files = []
        try:
            import tarfile
            mode = 'r:gz' if archive_path.suffix == '.gz' else 'r'

            with tarfile.open(archive_path, mode) as tar_ref:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ
                file_list = tar_ref.getnames()
                logger.info(f"üìã –§–∞–π–ª—ã –≤ TAR –∞—Ä—Ö–∏–≤–µ: {file_list}")

                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
                tar_ref.extractall(extract_to)

                # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                for file_name in file_list:
                    extracted_file = extract_to / file_name
                    if extracted_file.exists():
                        extracted_files.append(extracted_file)

            logger.info(f"‚úÖ TAR –∞—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω: {archive_path.name}")
        except ImportError:
            logger.error("‚ùå –ú–æ–¥—É–ª—å tarfile –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            raise Exception("–î–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ TAR –∞—Ä—Ö–∏–≤–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥—É–ª—å tarfile")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ TAR: {e}")
            raise

        return extracted_files

    def cancel(self):
        self._cancelled = True


class BIOSManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ BIOS.
    """

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.registry_path = self.project_root / 'app' / 'registry' / 'registry_bios.json'
        self.aliases_path = self.project_root / 'app' / 'registry' / 'registry_platform_aliases.json'
        self._cancelled = False
        self.download_thread = None
        self.platform_aliases = self._load_platform_aliases()

    def _load_platform_aliases(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–ª–∏–∞—Å—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        try:
            if self.aliases_path.exists():
                with open(self.aliases_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('platform_aliases', {})
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–∏–∞—Å–æ–≤: {e}")
        return {}

    def _resolve_platform_alias(self, platform: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–ª–∏–∞—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á"""
        # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫
        if platform in self.platform_aliases:
            resolved = self.platform_aliases[platform]
            logger.info(f"üîÅ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –∞–ª–∏–∞—Å '{platform}' -> '{resolved}'")
            return resolved

        # –ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫)
        for alias, real_platform in self.platform_aliases.items():
            if real_platform == platform:
                logger.info(f"üîÅ –ù–∞—à–ª–∏ –∞–ª–∏–∞—Å –¥–ª—è '{platform}': '{alias}'")
                return alias

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
        return platform

    def ensure_bios_for_platform(self, platform: str, progress_callback=None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
        """
        if self._cancelled:
            return False

        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è: {platform}")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ –∞–ª–∏–∞—Å—ã
        resolved_platform = self._resolve_platform_alias(platform)
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {resolved_platform}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
        registry_data = self._load_bios_registry()
        if registry_data is None:
            return True

        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        bios_info = registry_data.get(resolved_platform) or registry_data.get(platform)

        if not bios_info:
            logger.info(f"‚ÑπÔ∏è –î–ª—è {platform} –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")
            return True

        # === –û–°–û–ë–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø PS3 ===
        if platform.upper() == 'PS3' or resolved_platform.upper() == 'PS3':
            return self._ensure_ps3_bios(bios_info, progress_callback)

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        return self._ensure_standard_bios(bios_info, resolved_platform, progress_callback)

    def _verify_ps3_system_files(self, ps3_config_dir: Path) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ PS3
        """
        system_files_path = ps3_config_dir / "dev_flash"

        if not system_files_path.exists() or not system_files_path.is_dir():
            logger.info("üìÅ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        total_size = 0
        try:
            for file_path in system_files_path.rglob('*'):
                if file_path.is_file():
                    total_size += file_path.stat().st_size
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            return False

        size_mb = total_size / (1024 * 1024)
        logger.info(f"üìä –û–±—ä–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {size_mb:.1f} MB")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–µ–±—É–µ–º—ã–π –æ–±—ä–µ–º
        if size_mb < 180:
            logger.info(f"üìÅ –û–±—ä–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω: {size_mb:.1f} MB")
            return False

        logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
        return True

    def _ensure_ps3_bios(self, bios_info: dict, progress_callback=None) -> bool:
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ PS3
        """
        try:
            logger.info("üéÆ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ PS3...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è PS3
            from core import get_users_subpath
            ps3_config_dir = Path(get_users_subpath("configs")) / "PS3" / "rpcs3"
            ps3_config_dir.mkdir(parents=True, exist_ok=True)

            logger.info(f"üìÅ –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {ps3_config_dir}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
            if self._verify_ps3_system_files(ps3_config_dir):
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
                if progress_callback:
                    progress_callback(100, "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã")
                return True

            download_url = bios_info.get('bios_url')
            if not download_url:
                logger.info("‚ÑπÔ∏è –î–ª—è PS3 –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
                return True

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
            return self._download_and_install_bios(bios_info, ps3_config_dir, "PS3", progress_callback)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            return False

    def _ensure_standard_bios(self, bios_info: dict, platform: str, progress_callback=None) -> bool:
        """
        –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è BIOS –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        """
        download_url = bios_info.get('bios_url')
        if not download_url:
            logger.info(f"‚ÑπÔ∏è –î–ª—è {platform} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
            return True

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤
        from core import get_users_subpath
        bios_dir = Path(get_users_subpath("bios")) / platform
        bios_dir.mkdir(parents=True, exist_ok=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
        return self._download_and_install_bios(bios_info, bios_dir, platform, progress_callback)

    def _load_bios_registry(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä BIOS"""
        if not self.registry_path.exists():
            logger.info("‚ÑπÔ∏è registry_bios.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É")
            return None

        try:
            with open(self.registry_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è registry_bios.json: {e}")
            return None

    def _download_and_install_bios(self, bios_info: dict, target_dir: Path, platform: str, progress_callback=None) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã"""
        if self._cancelled:
            return False

        download_url = bios_info.get('bios_url')
        if not download_url:
            return False

        logger.info(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è {platform}")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        self.download_thread = BIOSDownloadThread(bios_info, target_dir, platform)

        if progress_callback:
            self.download_thread.progress_updated.connect(progress_callback)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.download_success = False

        def on_finished(success, message):
            self.download_success = success

        def on_error(error_msg):
            self.download_success = False

        self.download_thread.finished.connect(on_finished)
        self.download_thread.error_occurred.connect(on_error)

        self.download_thread.start()
        self.download_thread.wait()

        return self.download_success

    def cancel(self):
        self._cancelled = True
        if self.download_thread and self.download_thread.isRunning():
            self.download_thread.cancel()
            self.download_thread.wait()
