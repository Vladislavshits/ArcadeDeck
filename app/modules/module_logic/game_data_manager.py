import os
import json
import logging
from pathlib import Path
from typing import Dict, List, Any, Optional

logger = logging.getLogger('GameData')

class GameDataManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö"""

    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.registry_games_file = project_root / 'app' / 'registry' / 'registry_games.json'
        self.installed_games_file = project_root / 'users' / 'installed_games.json'
        logger.info(f"[GameData] üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä")
        logger.info(f"[GameData] üìÅ –†–µ–µ—Å—Ç—Ä –∏–≥—Ä: {self.registry_games_file}")
        logger.info(f"[GameData] üìÅ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã: {self.installed_games_file}")

        self.registry_games = self._load_registry_games()
        self.installed_games = self._load_installed_games()

        logger.info(f"[GameData] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.registry_games)} –∏–≥—Ä –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞")
        logger.info(f"[GameData] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.installed_games)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä")

    def _load_registry_games(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä—ã –∏–∑ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        try:
            from app.registry.registry_loader import RegistryLoader
            loader = RegistryLoader(self.project_root)
            games = loader.load_all_games()
            logger.info(f"[GameData] üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(games)} –∏–≥—Ä –∏–∑ –º–æ–¥—É–ª–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º")
            return games
        except Exception as e:
            logger.error(f"[GameData] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º: {e}")
            return []

    def _load_installed_games(self) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã"""
        try:
            if self.installed_games_file.exists():
                with open(self.installed_games_file, 'r', encoding='utf-8') as f:
                    games = json.load(f)
                    logger.info(f"[GameData] üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    return games
            else:
                logger.info(f"[GameData] üìã –§–∞–π–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ")
        except Exception as e:
            logger.error(f"[GameData] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä: {e}")
        return {}

    def get_all_games(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¢–û–õ–¨–ö–û —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ installed_games.json"""
        logger.info(f"[GameData] üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä...")
        result = []
        used_ids = set()

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—ã –∏–∑ installed_games.json
        for game_id, installed_data in self.installed_games.items():
            if game_id not in used_ids:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ
                registry_game = self._find_game_in_registry(game_id)

                if registry_game:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ + –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ
                    game_data = registry_game.copy()
                    game_data['is_installed'] = True
                    game_data['installed_info'] = installed_data
                    game_data['is_user_game'] = False
                else:
                    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ installed_games.json
                    game_data = {
                        'id': game_id,
                        'title': installed_data.get('title', 'Unknown Game'),
                        'platform': installed_data.get('platform', 'Unknown'),
                        'is_installed': True,
                        'installed_info': installed_data,
                        'is_user_game': True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é, –µ—Å–ª–∏ –Ω–µ—Ç –≤ —Ä–µ–µ—Å—Ç—Ä–µ
                    }

                result.append(game_data)
                used_ids.add(game_id)

        logger.info(f"[GameData] ‚úÖ –í—Å–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä: {len(result)}")
        return result

    def _find_game_in_registry(self, game_id: str) -> Optional[Dict[str, Any]]:
        """–ò—â–µ—Ç –∏–≥—Ä—É –≤ —Ä–µ–µ—Å—Ç—Ä–µ –ø–æ ID"""
        for game in self.registry_games:
            if game.get('id') == game_id:
                return game
        return None

    def _scan_user_games_directly(self) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–≥—Ä—ã, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ü–µ–ª–µ–π,
        # –∞ –Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
        games_dir = self.project_root / 'users' / 'games'
        if not games_dir.exists():
            return []

        logger.info(f"[GameData] üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–≥—Ä (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ)...")

        supported_formats = self._load_supported_formats(
            self.project_root / 'app' / 'registry' / 'registry_platforms.json'
        )

        found_games = []

        try:
            for root, dirs, files in os.walk(games_dir):
                for file in files:
                    if file.startswith('.') or '.' not in file:
                        continue

                    filename, ext = os.path.splitext(file)
                    ext = ext.lower()

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                    platform_found = None
                    for platform_id, platform_data in supported_formats.items():
                        if isinstance(platform_data, dict):
                            extensions = platform_data.get("supported_formats", [])
                            if ext in extensions:
                                platform_found = platform_id
                                break

                    if platform_found:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
                        game_id = filename.lower().replace(' ', '_').replace('.', '_')
                        game_data = {
                            "title": filename.replace('_', ' ').title(),
                            "platform": platform_found,
                            "path": str(Path(root) / file),
                            "id": game_id,
                            "file_name": file
                        }
                        found_games.append(game_data)

            logger.info(f"[GameData] üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–≥—Ä: {len(found_games)}")

        except Exception as e:
            logger.error(f"[GameData] ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

        return found_games

    def _normalize_title(self, title: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not title:
            return ""

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        normalized = title.lower()
        normalized = normalized.replace(':', '')
        normalized = normalized.replace('-', '')
        normalized = normalized.replace('_', ' ')
        normalized = normalized.replace('.', ' ')
        normalized = ' '.join(normalized.split())  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        return normalized.strip()

    def _load_supported_formats(self, registry_platform_file: Path) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        if not registry_platform_file.exists():
            logger.warning(f"[GameData] ‚ö†Ô∏è –§–∞–π–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {registry_platform_file}")
            return {}

        try:
            with open(registry_platform_file, "r", encoding="utf-8") as f:
                data = json.load(f)
                logger.info(f"[GameData] üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return data
        except Exception as e:
            logger.error(f"[GameData] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {e}")
            return {}

    def get_game_by_id(self, game_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–≥—Ä—É –ø–æ ID"""
        for game in self.get_all_games():
            if game.get('id') == game_id:
                return game
        return None

    def is_game_installed(self, game_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞"""
        return game_id in self.installed_games

    def refresh(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        logger.info(f"[GameData] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        self.registry_games = self._load_registry_games()
        self.installed_games = self._load_installed_games()
        logger.info(f"[GameData] ‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def get_installed_games(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã"""
        installed = [game for game in self.get_all_games() if game.get('is_installed')]
        logger.info(f"[GameData] üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä: {len(installed)}")
        return installed

    def get_uninstalled_games(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è,
        # —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        uninstalled = [game for game in self.get_all_games() if not game.get('is_installed')]
        logger.info(f"[GameData] üì¶ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä: {len(uninstalled)}")
        return uninstalled

    def get_all_available_games(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∏–≥—Ä—ã –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏)"""
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–µ/–ø–æ–∏—Å–∫–µ, –Ω–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ"""
        result = []
        for game in self.registry_games:
            game_copy = game.copy()
            game_id = game.get('id')
            game_copy['is_installed'] = game_id in self.installed_games if game_id else False
            game_copy['installed_info'] = self.installed_games.get(game_id, {}) if game_id else {}
            result.append(game_copy)

        logger.info(f"[GameData] üìö –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(result)}")
        return result

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_game_data_manager = None

def get_game_data_manager(project_root: Path = None) -> GameDataManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    global _game_data_manager
    if _game_data_manager is None and project_root:
        _game_data_manager = GameDataManager(project_root)
        logger.info(f"[GameData] üåü –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    elif _game_data_manager:
        logger.info(f"[GameData] üîÑ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        logger.warning(f"[GameData] ‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (project_root –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω)")
    return _game_data_manager

def set_game_data_manager(manager: GameDataManager):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global _game_data_manager
    _game_data_manager = manager
    logger.info(f"[GameData] üîß –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
