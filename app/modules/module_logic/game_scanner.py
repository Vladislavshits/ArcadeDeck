import os
import json
import logging
from pathlib import Path
from typing import List, Dict, Any

logger = logging.getLogger('PixelDeck')

# –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
from core import BASE_DIR

# –ò–º–ø–æ—Ä—Ç –ø—É—Ç–∏ –∫ –∏–≥—Ä–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
from core import get_users_subpath

# –í—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
REGISTRY_PLATFORM_FILE = os.path.join(BASE_DIR, "app", "registry", "registry_platforms.json")
GAMES_DIR = get_users_subpath("games")

def load_supported_formats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —á–µ—Ä–µ–∑ RegistryLoader"""
    try:
        # –ü–´–¢–ê–ï–ú–°–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ù–û–í–´–ô REGISTRYLOADER
        from app.registry.registry_loader import RegistryLoader
        loader = RegistryLoader(Path(BASE_DIR))
        platform_configs = loader.get_all_platform_configs()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        supported = {}
        for platform_id, config in platform_configs.items():
            supported[platform_id] = {
                "name": config.get("name", platform_id),
                "supported_formats": config.get("supported_formats", [])
            }

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(supported)} –ø–ª–∞—Ç—Ñ–æ—Ä–º —á–µ—Ä–µ–∑ RegistryLoader")
        return supported

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ RegistryLoader: {e}")

        # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        if not os.path.exists(REGISTRY_PLATFORM_FILE):
            logger.warning(f"Registry platform file not found: {REGISTRY_PLATFORM_FILE}")
            return {}

        try:
            with open(REGISTRY_PLATFORM_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –ø–ª–∞—Ç—Ñ–æ—Ä–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞")
                return data
        except Exception as e2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞: {e2}")
            return {}

def scan_games(games_dir=None) -> List[Dict[str, Any]]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É —Å –∏–≥—Ä–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    try:
        from .game_data_manager import get_game_data_manager
        manager = get_game_data_manager(Path(BASE_DIR))
        if manager:
            logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π GameDataManager")
            return manager.get_all_games()
        else:
            logger.warning(f"‚ö†Ô∏è GameDataManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è GameDataManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GameDataManager: {e}")

    # Fallback –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    logger.warning("üîÑ GameDataManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
    return _fallback_scan_games(games_dir)

def _fallback_scan_games(games_dir=None) -> List[Dict[str, Any]]:
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("="*50)
    logger.info(f"Scanning games...")
    logger.info(f"BASE_DIR: {BASE_DIR}")
    logger.info(f"REGISTRY_PLATFORM_FILE: {REGISTRY_PLATFORM_FILE}")
    logger.info(f"File exists: {os.path.exists(REGISTRY_PLATFORM_FILE)}")

    supported = load_supported_formats()
    logger.info(f"Supported platforms: {list(supported.keys())}")

    found_games = []

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    scan_dir = games_dir if games_dir else GAMES_DIR
    logger.info(f"Scanning directory: {scan_dir}")
    logger.info(f"Directory exists: {os.path.exists(scan_dir)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–≥—Ä–∞–º–∏
    if not os.path.exists(scan_dir) or not os.path.isdir(scan_dir):
        logger.warning(f"Directory does not exist: {scan_dir}")
        return found_games

    try:
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∏–≥—Ä –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
        file_count = 0
        for root, dirs, files in os.walk(scan_dir):
            for file in files:
                file_count += 1
                file_path = os.path.join(root, file)
                logger.debug(f"File {file_count}: {file}")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                filename, ext = os.path.splitext(file)
                ext = ext.lower()
                logger.debug(f"Extension: {ext}")

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                if not ext:
                    logger.debug(f"Skipping - no extension")
                    continue

                # –ò—â–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                platform_found = None
                platform_name = None

                for platform_id, platform_data in supported.items():
                    if isinstance(platform_data, dict):
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑ registry_platforms
                        extensions = platform_data.get("supported_formats", [])
                        platform_name = platform_data.get("name", platform_id)
                        logger.debug(f"Platform {platform_id} ({platform_name}) extensions: {extensions}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                        if ext in extensions:
                            platform_found = platform_id
                            logger.info(f"MATCH: {ext} -> {platform_id} ({platform_name})")
                            break

                if platform_found:
                    # –°–æ–∑–¥–∞–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                    game_id = filename.lower().replace(" ", "_").replace(".", "_")

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É –≤ —Å–ø–∏—Å–æ–∫
                    game_data = {
                        "title": filename,
                        "platform": platform_found,
                        "platform_name": platform_name,
                        "path": file_path,
                        "id": game_id,
                        "file_name": file
                    }
                    found_games.append(game_data)
                    logger.info(f"ADDED: {game_data['title']} ({game_data['platform']})")
                else:
                    logger.debug(f"SKIPPED: Unsupported format {ext}")

        logger.info(f"Total files processed: {file_count}")

    except Exception as e:
        logger.error(f"Error scanning games: {str(e)}")
        import traceback
        traceback.print_exc()

    logger.info(f"Found {len(found_games)} games")
    logger.info("="*50)
    return found_games

def is_game_installed(game_data: Dict[str, Any]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞"""
    try:
        from .game_data_manager import get_game_data_manager
        manager = get_game_data_manager(Path(BASE_DIR))
        if manager and 'id' in game_data:
            return manager.is_game_installed(game_data['id'])
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã: {e}")
    return False

def get_installed_games() -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    try:
        from .game_data_manager import get_game_data_manager
        manager = get_game_data_manager(Path(BASE_DIR))
        if manager:
            return manager.get_installed_games()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return []

def scan_installed_games():
    """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return get_installed_games()
