import os
import shutil
import time
import json
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('ArcadeDeck')

GAMES_DIR = "users/games/"

class GameImporter:
    """–ò–º–ø–æ—Ä—Ç–µ—Ä –∏–≥—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–µ—Å—Ç—Ä–æ–≤"""

    def __init__(self, project_root):
        self.project_root = Path(project_root)
        self.platform_formats_cache = {}
        self._init_registry_loader()

    def _init_registry_loader(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ä–µ–µ—Å—Ç—Ä–æ–≤"""
        try:
            from app.registry.registry_loader import RegistryLoader

            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ –ö –ö–û–†–ù–Æ –ü–†–û–ï–ö–¢–ê
            # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ 3 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö –∏–∑ app/modules/module_logic/
            project_root = Path(__file__).parent.parent.parent.parent
            logger.info(f"üìÅ Project root: {project_root}")
            logger.info(f"üìÅ –ü—É—Ç—å –∫ —Ä–µ–µ—Å—Ç—Ä–∞–º: {project_root / 'app' / 'registry'}")

            self.registry_loader = RegistryLoader(project_root)
            logger.info("‚úÖ RegistryLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
            platforms = self.get_supported_platforms()
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(platforms)}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RegistryLoader: {e}")
            import traceback
            logger.error(traceback.format_exc())
            self.registry_loader = None

    def get_supported_platforms(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç—ã"""
        if not self.registry_loader:
            logger.error("RegistryLoader –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {}

        try:
            platform_configs = self.registry_loader.get_all_platform_configs()
            platforms_data = {}

            for platform_id, config in platform_configs.items():
                formats = config.get("supported_formats", [])
                platforms_data[platform_id] = {
                    "formats": formats,
                    "name": config.get("name", platform_id),
                    "emulator": config.get("emulator", "")
                }
                logger.debug(f"üìã {platform_id}: {len(formats)} —Ñ–æ—Ä–º–∞—Ç–æ–≤")

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(platforms_data)} –ø–ª–∞—Ç—Ñ–æ—Ä–º")
            return platforms_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º: {e}")
            return {}

    def get_file_dialog_filters(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è QFileDialog —Å–æ –≤—Å–µ–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏"""
        platforms_data = self.get_supported_platforms()

        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        all_formats = set()
        for platform_id, data in platforms_data.items():
            formats = data.get("formats", [])
            all_formats.update(formats)

        # –ì–ª–∞–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä - –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
        filter_string = "–í—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ("
        filter_string += " ".join([f"*{fmt}" for fmt in sorted(all_formats)])
        filter_string += ")"

        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platform_filters = []
        for platform_id, data in platforms_data.items():
            platform_name = data.get("name", platform_id)
            formats = data.get("formats", [])
            if formats:
                platform_filter = f"{platform_name} ("
                platform_filter += " ".join([f"*{fmt}" for fmt in sorted(formats)])
                platform_filter += ")"
                platform_filters.append(platform_filter)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        all_filters = [filter_string] + sorted(platform_filters) + ["–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"]
        file_filter = ";;".join(all_filters)

        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(platform_filters)} –ø–ª–∞—Ç—Ñ–æ—Ä–º")
        return file_filter

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def get_file_filters(project_root):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞"""
        importer = GameImporter(project_root)
        return importer.get_file_dialog_filters()

    def detect_platform(self, file_path):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ RegistryLoader"""
        ext = os.path.splitext(file_path)[1].lower()
        logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è: {file_path}")
        logger.info(f"üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {ext}")

        if not ext:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è")
            return None

        # –ï—Å–ª–∏ RegistryLoader –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if not self.registry_loader:
            logger.warning("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback detection")
            return self._fallback_detect_platform(ext)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
            platform_configs = self.registry_loader.get_all_platform_configs()

            # –ò—â–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            for platform_id, config in platform_configs.items():
                formats = config.get("supported_formats", [])
                if ext in formats:
                    logger.info(f"‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï: {ext} -> {platform_id}")
                    return platform_id

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º fallback
            logger.warning(f"‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¥–ª—è {ext}")
            return self._fallback_detect_platform(ext)

        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return self._fallback_detect_platform(ext)

    def _fallback_detect_platform(self, ext):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        extension_map = {
            # PSP
            '.iso': 'psp', '.cso': 'psp', '.pbp': 'psp', '.cho': 'psp',
            '.chd': 'psp', '.prx': 'psp', '.elf': 'psp',

            # PS1
            '.bin': 'ps1', '.cue': 'ps1', '.img': 'ps1', '.mdf': 'ps1',
            '.chd': 'ps1',

            # PS2
            '.iso': 'ps2', '.mdf': 'ps2', '.mds': 'ps2', '.chd': 'ps2',

            # Nintendo DS
            '.nds': 'nds', '.srl': 'nds',

            # Nintendo 3DS
            '.3ds': '3ds', '.cia': '3ds', '.cxi': '3ds',

            # GameCube
            '.iso': 'gamecube', '.gcm': 'gamecube', '.rvz': 'gamecube',

            # Wii
            '.iso': 'wii', '.wbfs': 'wii', '.rvz': 'wii',

            # Dreamcast
            '.cdi': 'dreamcast', '.gdi': 'dreamcast',

            # Xbox
            '.iso': 'xbox', '.xbe': 'xbox',
        }

        platform = extension_map.get(ext)
        if platform:
            logger.info(f"üîÑ Fallback: {ext} -> {platform}")
        else:
            logger.warning(f"üîÑ Fallback: —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {ext} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")

        return platform

    def get_platform_info(self, platform_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"""
        if not self.registry_loader:
            return None

        try:
            config = self.registry_loader.get_platform_config(platform_id.lower())
            if config:
                return {
                    "id": platform_id,
                    "name": config.get("name", platform_id),
                    "emulator": config.get("emulator", ""),
                    "supported_formats": config.get("supported_formats", []),
                    "bios_required": config.get("bios_required", False),
                    "bios_files": config.get("bios_files", [])
                }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform_id}: {e}")

        return None

    def import_game(self, file_path, target_platform=None):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É"""
        logger.info(f"üéÆ –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–≥—Ä—ã: {file_path}")

        if not os.path.exists(file_path):
            raise ValueError("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        if target_platform:
            platform = target_platform
            logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: {platform}")
        else:
            platform = self.detect_platform(file_path)

        if not platform:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {os.path.splitext(file_path)[1]}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        platform_info = self.get_platform_info(platform)
        platform_name = platform_info.get("name", platform) if platform_info else platform

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        platform_dir = os.path.join(GAMES_DIR, platform)
        os.makedirs(platform_dir, exist_ok=True)
        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platform_dir}")

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        filename = os.path.basename(file_path)
        new_path = os.path.join(platform_dir, filename)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
        counter = 1
        base_name, ext = os.path.splitext(filename)
        while os.path.exists(new_path):
            new_path = os.path.join(platform_dir, f"{base_name}_{counter}{ext}")
            counter += 1

        logger.info(f"üìã –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤: {new_path}")
        shutil.copy2(file_path, new_path)

        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        title = base_name.replace('_', ' ').title()

        game_data = {
            "id": f"{platform}_{base_name.lower()}",
            "title": title,
            "platform": platform,
            "platform_name": platform_name,
            "file_name": filename,
            "file_path": new_path,
            "file_size": os.path.getsize(new_path),
            "imported_at": time.strftime("%Y-%m-%d %H:%M:%S"),
            "status": "imported"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if platform_info:
            game_data["emulator"] = platform_info.get("emulator")
            game_data["bios_required"] = platform_info.get("bios_required", False)

        logger.info(f"‚úÖ –ò–≥—Ä–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {title} ({platform_name})")
        return game_data

    def batch_import(self, file_paths):
        """–ü–∞–∫–µ—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–≥—Ä"""
        results = {
            "successful": [],
            "failed": [],
            "total": len(file_paths)
        }

        for file_path in file_paths:
            try:
                game_data = self.import_game(file_path)
                results["successful"].append(game_data)
            except Exception as e:
                results["failed"].append({
                    "file": file_path,
                    "error": str(e)
                })
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {file_path}: {e}")

        logger.info(f"üìä –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(results['successful'])} —É—Å–ø–µ—à–Ω–æ, {len(results['failed'])} —Å –æ—à–∏–±–∫–∞–º–∏")
        return results


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def create_importer(project_root):
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–º–ø–æ—Ä—Ç–µ—Ä–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)"""
    return GameImporter(project_root)


def detect_platform(file_path, project_root):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ñ–∞–π–ª–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    importer = GameImporter(project_root)
    return importer.detect_platform(file_path)


def import_game(file_path, project_root, target_platform=None):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä—É (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    importer = GameImporter(project_root)
    return importer.import_game(file_path, target_platform)


# –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def debug_platforms_detection(project_root):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    print("\n" + "="*50)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–õ–ê–¢–§–û–†–ú")
    print("="*50)

    importer = GameImporter(project_root)
    platforms = importer.get_supported_platforms()

    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º: {len(platforms)}")

    for platform_id, data in platforms.items():
        formats = data.get("formats", [])
        emulator = data.get("emulator", "N/A")
        print(f"   üéÆ {platform_id} ({emulator}): {len(formats)} —Ñ–æ—Ä–º–∞—Ç–æ–≤")
        if formats:
            print(f"      üìÅ {', '.join(formats[:5])}{'...' if len(formats) > 5 else ''}")

    print("="*50)
    return platforms


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–µ—Ä–∞
    project_root = Path(__file__).parent.parent
    importer = GameImporter(project_root)

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    debug_platforms_detection(project_root)

    # –ü—Ä–∏–º–µ—Ä –∏–º–ø–æ—Ä—Ç–∞
    test_file = "/path/to/game.iso"
    if os.path.exists(test_file):
        try:
            game_data = importer.import_game(test_file)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {game_data}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
